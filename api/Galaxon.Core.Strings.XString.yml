### YamlMime:ManagedReference
items:
- uid: Galaxon.Core.Strings.XString
  commentId: T:Galaxon.Core.Strings.XString
  id: XString
  parent: Galaxon.Core.Strings
  children:
  - Galaxon.Core.Strings.XString.EqualsIgnoreCase(System.String,System.Nullable{System.String})
  - Galaxon.Core.Strings.XString.IsPalindrome(System.String)
  - Galaxon.Core.Strings.XString.RemoveDiacritics(System.String,Galaxon.Core.Strings.InvalidCharAction)
  - Galaxon.Core.Strings.XString.Repeat(System.String,System.Int32)
  - Galaxon.Core.Strings.XString.ToDecimal(System.String)
  - Galaxon.Core.Strings.XString.ToDouble(System.String)
  - Galaxon.Core.Strings.XString.ToInt(System.String)
  - Galaxon.Core.Strings.XString.ToSmallCaps(System.String,Galaxon.Core.Strings.InvalidCharAction)
  - Galaxon.Core.Strings.XString.Transform(System.String,Dictionary{System.Char,System.Char},Galaxon.Core.Strings.InvalidCharAction)
  langs:
  - csharp
  - vb
  name: XString
  nameWithType: XString
  fullName: Galaxon.Core.Strings.XString
  type: Class
  source:
    remote:
      path: Strings/XString.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: XString
    path: Strings/XString.cs
    startLine: 8
  assemblies:
  - Galaxon.Core.Strings
  namespace: Galaxon.Core.Strings
  summary: "\nExtension methods for String.\n"
  example: []
  syntax:
    content: 'public static class XString : object'
    content.vb: >-
      Public Module XString
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Galaxon.Core.Strings.XString.EqualsIgnoreCase(System.String,System.Nullable{System.String})
  commentId: M:Galaxon.Core.Strings.XString.EqualsIgnoreCase(System.String,System.Nullable{System.String})
  id: EqualsIgnoreCase(System.String,System.Nullable{System.String})
  isExtensionMethod: true
  parent: Galaxon.Core.Strings.XString
  langs:
  - csharp
  - vb
  name: EqualsIgnoreCase(String, Nullable<String>)
  nameWithType: XString.EqualsIgnoreCase(String, Nullable<String>)
  fullName: Galaxon.Core.Strings.XString.EqualsIgnoreCase(System.String, System.Nullable<System.String>)
  type: Method
  source:
    remote:
      path: Strings/XString.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: EqualsIgnoreCase
    path: Strings/XString.cs
    startLine: 13
  assemblies:
  - Galaxon.Core.Strings
  namespace: Galaxon.Core.Strings
  summary: "\nSee if 2 strings are equal, ignoring case.\n"
  example: []
  syntax:
    content: public static bool EqualsIgnoreCase(this string str1, string? str2)
    parameters:
    - id: str1
      type: System.String
    - id: str2
      type: System.Nullable{System.String}
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EqualsIgnoreCase(str1 As String, str2 As String?) As Boolean
  overload: Galaxon.Core.Strings.XString.EqualsIgnoreCase*
  nameWithType.vb: XString.EqualsIgnoreCase(String, Nullable(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Strings.XString.EqualsIgnoreCase(System.String, System.Nullable(Of System.String))
  name.vb: EqualsIgnoreCase(String, Nullable(Of String))
- uid: Galaxon.Core.Strings.XString.ToInt(System.String)
  commentId: M:Galaxon.Core.Strings.XString.ToInt(System.String)
  id: ToInt(System.String)
  isExtensionMethod: true
  parent: Galaxon.Core.Strings.XString
  langs:
  - csharp
  - vb
  name: ToInt(String)
  nameWithType: XString.ToInt(String)
  fullName: Galaxon.Core.Strings.XString.ToInt(System.String)
  type: Method
  source:
    remote:
      path: Strings/XString.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: ToInt
    path: Strings/XString.cs
    startLine: 20
  assemblies:
  - Galaxon.Core.Strings
  namespace: Galaxon.Core.Strings
  summary: "\nConvert string to int without throwing.\nIf the string cannot be parsed into an int, return null.\n"
  example: []
  syntax:
    content: public static int? ToInt(this string str)
    parameters:
    - id: str
      type: System.String
    return:
      type: System.Nullable{System.Int32}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToInt(str As String) As Integer?
  overload: Galaxon.Core.Strings.XString.ToInt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Strings.XString.ToDouble(System.String)
  commentId: M:Galaxon.Core.Strings.XString.ToDouble(System.String)
  id: ToDouble(System.String)
  isExtensionMethod: true
  parent: Galaxon.Core.Strings.XString
  langs:
  - csharp
  - vb
  name: ToDouble(String)
  nameWithType: XString.ToDouble(String)
  fullName: Galaxon.Core.Strings.XString.ToDouble(System.String)
  type: Method
  source:
    remote:
      path: Strings/XString.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: ToDouble
    path: Strings/XString.cs
    startLine: 27
  assemblies:
  - Galaxon.Core.Strings
  namespace: Galaxon.Core.Strings
  summary: "\nConvert string to double without throwing.\nIf the string cannot be parsed into a double, return null.\n"
  example: []
  syntax:
    content: public static double? ToDouble(this string str)
    parameters:
    - id: str
      type: System.String
    return:
      type: System.Nullable{System.Double}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDouble(str As String) As Double?
  overload: Galaxon.Core.Strings.XString.ToDouble*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Strings.XString.ToDecimal(System.String)
  commentId: M:Galaxon.Core.Strings.XString.ToDecimal(System.String)
  id: ToDecimal(System.String)
  isExtensionMethod: true
  parent: Galaxon.Core.Strings.XString
  langs:
  - csharp
  - vb
  name: ToDecimal(String)
  nameWithType: XString.ToDecimal(String)
  fullName: Galaxon.Core.Strings.XString.ToDecimal(System.String)
  type: Method
  source:
    remote:
      path: Strings/XString.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: ToDecimal
    path: Strings/XString.cs
    startLine: 34
  assemblies:
  - Galaxon.Core.Strings
  namespace: Galaxon.Core.Strings
  summary: "\nConvert string to decimal without throwing.\nIf the string cannot be parsed into a decimal, return null.\n"
  example: []
  syntax:
    content: public static decimal? ToDecimal(this string str)
    parameters:
    - id: str
      type: System.String
    return:
      type: System.Nullable{System.Decimal}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDecimal(str As String) As Decimal?
  overload: Galaxon.Core.Strings.XString.ToDecimal*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Strings.XString.IsPalindrome(System.String)
  commentId: M:Galaxon.Core.Strings.XString.IsPalindrome(System.String)
  id: IsPalindrome(System.String)
  isExtensionMethod: true
  parent: Galaxon.Core.Strings.XString
  langs:
  - csharp
  - vb
  name: IsPalindrome(String)
  nameWithType: XString.IsPalindrome(String)
  fullName: Galaxon.Core.Strings.XString.IsPalindrome(System.String)
  type: Method
  source:
    remote:
      path: Strings/XString.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: IsPalindrome
    path: Strings/XString.cs
    startLine: 40
  assemblies:
  - Galaxon.Core.Strings
  namespace: Galaxon.Core.Strings
  summary: "\nChecks to see if the string is a palindrome.\n"
  example: []
  syntax:
    content: public static bool IsPalindrome(this string str)
    parameters:
    - id: str
      type: System.String
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsPalindrome(str As String) As Boolean
  overload: Galaxon.Core.Strings.XString.IsPalindrome*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Strings.XString.Transform(System.String,Dictionary{System.Char,System.Char},Galaxon.Core.Strings.InvalidCharAction)
  commentId: M:Galaxon.Core.Strings.XString.Transform(System.String,Dictionary{System.Char,System.Char},Galaxon.Core.Strings.InvalidCharAction)
  id: Transform(System.String,Dictionary{System.Char,System.Char},Galaxon.Core.Strings.InvalidCharAction)
  isExtensionMethod: true
  parent: Galaxon.Core.Strings.XString
  langs:
  - csharp
  - vb
  name: Transform(String, Dictionary<Char, Char>, InvalidCharAction)
  nameWithType: XString.Transform(String, Dictionary<Char, Char>, InvalidCharAction)
  fullName: Galaxon.Core.Strings.XString.Transform(System.String, Dictionary<System.Char, System.Char>, Galaxon.Core.Strings.InvalidCharAction)
  type: Method
  source:
    remote:
      path: Strings/XString.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Transform
    path: Strings/XString.cs
    startLine: 63
  assemblies:
  - Galaxon.Core.Strings
  namespace: Galaxon.Core.Strings
  summary: "\nTransform characters in a string into other characters by using a character map.\nExample use cases:\n* making a string upper- or lower-case\n* converting lowercase characters to small caps\n* making a string superscript or subscript\n* transliteration/removal of diacritics\n* converting non-alphanumeric characters into hyphens, e.g. for a URL\n"
  example: []
  syntax:
    content: public static string Transform(this string str, Dictionary<char, char> charMap, InvalidCharAction action = default(InvalidCharAction))
    parameters:
    - id: str
      type: System.String
      description: The original string.
    - id: charMap
      type: Dictionary{System.Char,System.Char}
      description: The character map.
    - id: action
      type: Galaxon.Core.Strings.InvalidCharAction
      description: "\nCode that tells the algorithm what to do if a character is encountered that is not in the\ncharacter map.\n0 = Throw an exception (default).\n1 = Skip it, excluding it from the output.\n2 = Keep the original, untransformed character.\n"
    return:
      type: System.String
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Transform(str As String, charMap As Dictionary(Of Char, Char), action As InvalidCharAction = Nothing) As String
  overload: Galaxon.Core.Strings.XString.Transform*
  exceptions:
  - type: Galaxon.Core.Exceptions.ArgumentInvalidException
    commentId: T:Galaxon.Core.Exceptions.ArgumentInvalidException
  nameWithType.vb: XString.Transform(String, Dictionary(Of Char, Char), InvalidCharAction)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Strings.XString.Transform(System.String, Dictionary(Of System.Char, System.Char), Galaxon.Core.Strings.InvalidCharAction)
  name.vb: Transform(String, Dictionary(Of Char, Char), InvalidCharAction)
- uid: Galaxon.Core.Strings.XString.ToSmallCaps(System.String,Galaxon.Core.Strings.InvalidCharAction)
  commentId: M:Galaxon.Core.Strings.XString.ToSmallCaps(System.String,Galaxon.Core.Strings.InvalidCharAction)
  id: ToSmallCaps(System.String,Galaxon.Core.Strings.InvalidCharAction)
  isExtensionMethod: true
  parent: Galaxon.Core.Strings.XString
  langs:
  - csharp
  - vb
  name: ToSmallCaps(String, InvalidCharAction)
  nameWithType: XString.ToSmallCaps(String, InvalidCharAction)
  fullName: Galaxon.Core.Strings.XString.ToSmallCaps(System.String, Galaxon.Core.Strings.InvalidCharAction)
  type: Method
  source:
    remote:
      path: Strings/XString.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: ToSmallCaps
    path: Strings/XString.cs
    startLine: 95
  assemblies:
  - Galaxon.Core.Strings
  namespace: Galaxon.Core.Strings
  syntax:
    content: public static string ToSmallCaps(this string str, InvalidCharAction action = InvalidCharAction.Keep)
    parameters:
    - id: str
      type: System.String
    - id: action
      type: Galaxon.Core.Strings.InvalidCharAction
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToSmallCaps(str As String, action As InvalidCharAction = InvalidCharAction.Keep) As String
  overload: Galaxon.Core.Strings.XString.ToSmallCaps*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Strings.XString.RemoveDiacritics(System.String,Galaxon.Core.Strings.InvalidCharAction)
  commentId: M:Galaxon.Core.Strings.XString.RemoveDiacritics(System.String,Galaxon.Core.Strings.InvalidCharAction)
  id: RemoveDiacritics(System.String,Galaxon.Core.Strings.InvalidCharAction)
  isExtensionMethod: true
  parent: Galaxon.Core.Strings.XString
  langs:
  - csharp
  - vb
  name: RemoveDiacritics(String, InvalidCharAction)
  nameWithType: XString.RemoveDiacritics(String, InvalidCharAction)
  fullName: Galaxon.Core.Strings.XString.RemoveDiacritics(System.String, Galaxon.Core.Strings.InvalidCharAction)
  type: Method
  source:
    remote:
      path: Strings/XString.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: RemoveDiacritics
    path: Strings/XString.cs
    startLine: 99
  assemblies:
  - Galaxon.Core.Strings
  namespace: Galaxon.Core.Strings
  syntax:
    content: public static string RemoveDiacritics(this string str, InvalidCharAction action = InvalidCharAction.Keep)
    parameters:
    - id: str
      type: System.String
    - id: action
      type: Galaxon.Core.Strings.InvalidCharAction
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RemoveDiacritics(str As String, action As InvalidCharAction = InvalidCharAction.Keep) As String
  overload: Galaxon.Core.Strings.XString.RemoveDiacritics*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Strings.XString.Repeat(System.String,System.Int32)
  commentId: M:Galaxon.Core.Strings.XString.Repeat(System.String,System.Int32)
  id: Repeat(System.String,System.Int32)
  parent: Galaxon.Core.Strings.XString
  langs:
  - csharp
  - vb
  name: Repeat(String, Int32)
  nameWithType: XString.Repeat(String, Int32)
  fullName: Galaxon.Core.Strings.XString.Repeat(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Strings/XString.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Repeat
    path: Strings/XString.cs
    startLine: 106
  assemblies:
  - Galaxon.Core.Strings
  namespace: Galaxon.Core.Strings
  summary: "\nConstruct a new string by repeating a string s n times.\n"
  example: []
  syntax:
    content: public static string Repeat(string s, int n)
    parameters:
    - id: s
      type: System.String
    - id: n
      type: System.Int32
    return:
      type: System.String
    content.vb: Public Shared Function Repeat(s As String, n As Integer) As String
  overload: Galaxon.Core.Strings.XString.Repeat*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Galaxon.Core.Strings
  commentId: N:Galaxon.Core.Strings
  name: Galaxon.Core.Strings
  nameWithType: Galaxon.Core.Strings
  fullName: Galaxon.Core.Strings
- uid: System.Object
  commentId: '!:System.Object'
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Galaxon.Core.Strings.XString.EqualsIgnoreCase*
  commentId: Overload:Galaxon.Core.Strings.XString.EqualsIgnoreCase
  name: EqualsIgnoreCase
  nameWithType: XString.EqualsIgnoreCase
  fullName: Galaxon.Core.Strings.XString.EqualsIgnoreCase
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Nullable{System.String}
  commentId: '!:System.Nullable{System.String}'
  definition: System.Nullable`1
  name: Nullable<String>
  nameWithType: Nullable<String>
  fullName: System.Nullable<System.String>
  nameWithType.vb: Nullable(Of String)
  fullName.vb: System.Nullable(Of System.String)
  name.vb: Nullable(Of String)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Core.Strings.XString.ToInt*
  commentId: Overload:Galaxon.Core.Strings.XString.ToInt
  name: ToInt
  nameWithType: XString.ToInt
  fullName: Galaxon.Core.Strings.XString.ToInt
- uid: System.Nullable{System.Int32}
  commentId: '!:System.Nullable{System.Int32}'
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Core.Strings.XString.ToDouble*
  commentId: Overload:Galaxon.Core.Strings.XString.ToDouble
  name: ToDouble
  nameWithType: XString.ToDouble
  fullName: Galaxon.Core.Strings.XString.ToDouble
- uid: System.Nullable{System.Double}
  commentId: '!:System.Nullable{System.Double}'
  definition: System.Nullable`1
  name: Nullable<Double>
  nameWithType: Nullable<Double>
  fullName: System.Nullable<System.Double>
  nameWithType.vb: Nullable(Of Double)
  fullName.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Core.Strings.XString.ToDecimal*
  commentId: Overload:Galaxon.Core.Strings.XString.ToDecimal
  name: ToDecimal
  nameWithType: XString.ToDecimal
  fullName: Galaxon.Core.Strings.XString.ToDecimal
- uid: System.Nullable{System.Decimal}
  commentId: '!:System.Nullable{System.Decimal}'
  definition: System.Nullable`1
  name: Nullable<Decimal>
  nameWithType: Nullable<Decimal>
  fullName: System.Nullable<System.Decimal>
  nameWithType.vb: Nullable(Of Decimal)
  fullName.vb: System.Nullable(Of System.Decimal)
  name.vb: Nullable(Of Decimal)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    nameWithType: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Core.Strings.XString.IsPalindrome*
  commentId: Overload:Galaxon.Core.Strings.XString.IsPalindrome
  name: IsPalindrome
  nameWithType: XString.IsPalindrome
  fullName: Galaxon.Core.Strings.XString.IsPalindrome
- uid: Galaxon.Core.Exceptions.ArgumentInvalidException
  commentId: T:Galaxon.Core.Exceptions.ArgumentInvalidException
  name: ArgumentInvalidException
  nameWithType: ArgumentInvalidException
  fullName: Galaxon.Core.Exceptions.ArgumentInvalidException
- uid: Galaxon.Core.Strings.XString.Transform*
  commentId: Overload:Galaxon.Core.Strings.XString.Transform
  name: Transform
  nameWithType: XString.Transform
  fullName: Galaxon.Core.Strings.XString.Transform
- uid: Dictionary{System.Char,System.Char}
  commentId: '!:Dictionary{System.Char,System.Char}'
  definition: Dictionary`2
  name: Dictionary<Char, Char>
  nameWithType: Dictionary<Char, Char>
  fullName: Dictionary<System.Char, System.Char>
  nameWithType.vb: Dictionary(Of Char, Char)
  fullName.vb: Dictionary(Of System.Char, System.Char)
  name.vb: Dictionary(Of Char, Char)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Core.Strings.InvalidCharAction
  commentId: T:Galaxon.Core.Strings.InvalidCharAction
  parent: Galaxon.Core.Strings
  name: InvalidCharAction
  nameWithType: InvalidCharAction
  fullName: Galaxon.Core.Strings.InvalidCharAction
- uid: Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Core.Strings.XString.ToSmallCaps*
  commentId: Overload:Galaxon.Core.Strings.XString.ToSmallCaps
  name: ToSmallCaps
  nameWithType: XString.ToSmallCaps
  fullName: Galaxon.Core.Strings.XString.ToSmallCaps
- uid: Galaxon.Core.Strings.XString.RemoveDiacritics*
  commentId: Overload:Galaxon.Core.Strings.XString.RemoveDiacritics
  name: RemoveDiacritics
  nameWithType: XString.RemoveDiacritics
  fullName: Galaxon.Core.Strings.XString.RemoveDiacritics
- uid: Galaxon.Core.Strings.XString.Repeat*
  commentId: Overload:Galaxon.Core.Strings.XString.Repeat
  name: Repeat
  nameWithType: XString.Repeat
  fullName: Galaxon.Core.Strings.XString.Repeat
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
