### YamlMime:ManagedReference
items:
- uid: Galaxon.Core.Numbers.ConvertBase
  commentId: T:Galaxon.Core.Numbers.ConvertBase
  id: ConvertBase
  parent: Galaxon.Core.Numbers
  children:
  - Galaxon.Core.Numbers.ConvertBase.Digits
  - Galaxon.Core.Numbers.ConvertBase.FromBase``1(System.String,System.Byte)
  - Galaxon.Core.Numbers.ConvertBase.FromBin``1(System.String)
  - Galaxon.Core.Numbers.ConvertBase.FromHex``1(System.String)
  - Galaxon.Core.Numbers.ConvertBase.FromOct``1(System.String)
  - Galaxon.Core.Numbers.ConvertBase.FromQuat``1(System.String)
  - Galaxon.Core.Numbers.ConvertBase.FromTetra``1(System.String)
  - Galaxon.Core.Numbers.ConvertBase.FromTria``1(System.String)
  - Galaxon.Core.Numbers.ConvertBase.MaxBase
  - Galaxon.Core.Numbers.ConvertBase.MinBase
  - Galaxon.Core.Numbers.ConvertBase.ToBase``1(``0,System.Byte,System.Int32,System.Nullable{System.Boolean})
  - Galaxon.Core.Numbers.ConvertBase.ToBase``1(``0,System.Byte,System.Nullable{System.Boolean})
  - Galaxon.Core.Numbers.ConvertBase.ToBin``1(``0,System.Int32)
  - Galaxon.Core.Numbers.ConvertBase.ToHex``1(``0,System.Int32,System.Nullable{System.Boolean})
  - Galaxon.Core.Numbers.ConvertBase.ToOct``1(``0,System.Int32)
  - Galaxon.Core.Numbers.ConvertBase.ToQuat``1(``0,System.Int32)
  - Galaxon.Core.Numbers.ConvertBase.ToTetra``1(``0,System.Int32,System.Nullable{System.Boolean})
  - Galaxon.Core.Numbers.ConvertBase.ToTria``1(``0,System.Int32,System.Nullable{System.Boolean})
  langs:
  - csharp
  - vb
  name: ConvertBase
  nameWithType: ConvertBase
  fullName: Galaxon.Core.Numbers.ConvertBase
  type: Class
  source:
    remote:
      path: Numbers/ConvertBase.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: ConvertBase
    path: Numbers/ConvertBase.cs
    startLine: 80
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nThis class supports conversion between integers and strings of digits in a specified base,\nwhich can be in the range 2..64.\n\nNB: &quot;radix&quot; is used as a synonym for &quot;base&quot; in method arguments, because &quot;base&quot; is a keyword in\nC#.\n\nAll built-in integer types are supported, including Int128, UInt128, and BigInteger.\n\nMost languages support conversion to and from base 2 to 36, formed from the 10 digits plus the\n26 letters in the English alphabet.\n\nHere I&apos;ve appended the 28 of the 32 non-alphanumeric (symbol) ASCII characters to this character\nset in order to extend the range of supported bases to 64. The symbols are appended to the\nstandard 36 digits in ASCII value order. These characters only require 1 byte in UTF-8 and I\nassume all, or almost all, computer keyboards will support all of them.\n\nThis has been done to add support for base 64, mainly for my own amusement, and to provide\nan alternative to bog-standard Base64 encoding (see link). The difference here, if it matters,\nis that the base 64 digit values used here are compatible with hexadecimal digit values, and all\nother bases.\n\nThe 4 omitted characters are &apos;.&apos; (period), &apos;,&apos; (comma), and &apos;_&apos; (underscore) because these are\nused as group separators (in different contexts), and &apos;&quot;&apos; (double quote) which is the string\ndelimiter in C#.\n\nAs in hexadecimal literals, upper-case letters have the same value as lower-case letters.\nUse the parameter &quot;letterCase&quot; to specify for the result to use all lower- or all upper-case\nletters. See the method documentation for ToBase() for how to use this parameter.\n\nThe default is to use lower-case for all letters except for L (see the Digits constant).\nLower-case letters are more easily distinguishable from numerals than upper-case letters.\nFor example:\nO looks like 0\nI looks like 1\nZ looks like 2\nS looks like 5\nG looks like 6\nT looks like 7\nB looks like 8\nThe only similar problem with lower-case letters is that l looks like 1, so upper-case is used\nfor this letter only. (This is also why we use &quot;L&quot; as a suffix for long literals, as a rule.)\n\nThese days, most fonts, especially those used by IDEs, make it easy enough to distinguish\nbetween letters and numbers, so it&apos;s not the issue it once was.\nMultiple coding standards for CSS require lower-case hex digits in color literals.\n&quot;L&quot; is not a hexadecimal digit, so this behaviour doesn&apos;t violate that standard.\nOther than that, I can&apos;t find any standards that mandate one over the other.\n\nThe core methods are ToBase() and FromBase(). In addition, convenience methods are provided in\nthe form of &quot;To&quot; and &quot;From&quot; methods for all bases that are a power of 2:\n----------------------------------------------------\nNumeral system          Base   Abbreviation\n----------------------------------------------------\nbinary                   2        Bin\nquaternary               4        Quat\noctal                    8        Oct\nhexadecimal             16        Hex\ntriacontakaidecimal*    32        Tria\ntetrasexagesimal        64        Tetra\n----------------------------------------------------\n*Base 32 is more correctly called duotrigesimal. However, there are multiple methods in use for\nencoding base 32 digits; the one used here is called triacontakaidecimal (see link below), also\nknown as base32hex. It&apos;s the same encoding used in Java in JavaScript.\n"
  example: []
  syntax:
    content: 'public static class ConvertBase : object'
    content.vb: >-
      Public Module ConvertBase
          Inherits Object
  see:
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/List_of_numeral_systems
    altText: https://en.wikipedia.org/wiki/List_of_numeral_systems
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Binary_number
    altText: https://en.wikipedia.org/wiki/Binary_number
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Quaternary_numeral_system
    altText: https://en.wikipedia.org/wiki/Quaternary_numeral_system
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Octal
    altText: https://en.wikipedia.org/wiki/Octal
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Hexadecimal
    altText: https://en.wikipedia.org/wiki/Hexadecimal
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Base32
    altText: https://en.wikipedia.org/wiki/Base32
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Base64
    altText: https://en.wikipedia.org/wiki/Base64
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Galaxon.Core.Numbers.ConvertBase.MinBase
  commentId: F:Galaxon.Core.Numbers.ConvertBase.MinBase
  id: MinBase
  parent: Galaxon.Core.Numbers.ConvertBase
  langs:
  - csharp
  - vb
  name: MinBase
  nameWithType: ConvertBase.MinBase
  fullName: Galaxon.Core.Numbers.ConvertBase.MinBase
  type: Field
  source:
    remote:
      path: Numbers/ConvertBase.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: MinBase
    path: Numbers/ConvertBase.cs
    startLine: 85
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: The minimum base supported by the type.
  example: []
  syntax:
    content: public const int MinBase = null
    return:
      type: System.Int32
    content.vb: Public Const MinBase As Integer = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Galaxon.Core.Numbers.ConvertBase.MaxBase
  commentId: F:Galaxon.Core.Numbers.ConvertBase.MaxBase
  id: MaxBase
  parent: Galaxon.Core.Numbers.ConvertBase
  langs:
  - csharp
  - vb
  name: MaxBase
  nameWithType: ConvertBase.MaxBase
  fullName: Galaxon.Core.Numbers.ConvertBase.MaxBase
  type: Field
  source:
    remote:
      path: Numbers/ConvertBase.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: MaxBase
    path: Numbers/ConvertBase.cs
    startLine: 88
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: The maximum base supported by the type.
  example: []
  syntax:
    content: public const int MaxBase = null
    return:
      type: System.Int32
    content.vb: Public Const MaxBase As Integer = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Galaxon.Core.Numbers.ConvertBase.Digits
  commentId: F:Galaxon.Core.Numbers.ConvertBase.Digits
  id: Digits
  parent: Galaxon.Core.Numbers.ConvertBase
  langs:
  - csharp
  - vb
  name: Digits
  nameWithType: ConvertBase.Digits
  fullName: Galaxon.Core.Numbers.ConvertBase.Digits
  type: Field
  source:
    remote:
      path: Numbers/ConvertBase.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Digits
    path: Numbers/ConvertBase.cs
    startLine: 91
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: Valid digits as a string, supporting up to base 64.
  example: []
  syntax:
    content: public const string Digits = null
    return:
      type: System.String
    content.vb: Public Const Digits As String = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Galaxon.Core.Numbers.ConvertBase.ToBase``1(``0,System.Byte,System.Int32,System.Nullable{System.Boolean})
  commentId: M:Galaxon.Core.Numbers.ConvertBase.ToBase``1(``0,System.Byte,System.Int32,System.Nullable{System.Boolean})
  id: ToBase``1(``0,System.Byte,System.Int32,System.Nullable{System.Boolean})
  isExtensionMethod: true
  parent: Galaxon.Core.Numbers.ConvertBase
  langs:
  - csharp
  - vb
  name: ToBase<T>(T, Byte, Int32, Nullable<Boolean>)
  nameWithType: ConvertBase.ToBase<T>(T, Byte, Int32, Nullable<Boolean>)
  fullName: Galaxon.Core.Numbers.ConvertBase.ToBase<T>(T, System.Byte, System.Int32, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: Numbers/ConvertBase.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: ToBase
    path: Numbers/ConvertBase.cs
    startLine: 117
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nConvert an integer to a string of digits in a given base.\n\nNote, a negative value will be converted to a non-negative value with the same underlying\nbits. This reflects the behaviour of other base-conversion methods in .NET.\n"
  example: []
  syntax:
    content: >-
      public static string ToBase<T>(this T n, byte radix, int width = 1, bool? letterCase = null)
          where T : IBinaryInteger<T>
    parameters:
    - id: n
      type: '{T}'
      description: The instance value.
    - id: radix
      type: System.Byte
      description: The base to convert to.
    - id: width
      type: System.Int32
      description: The minimum number of digits.
    - id: letterCase
      type: System.Nullable{System.Boolean}
      description: "\nIf letters should be lower-case, upper-case, or default.\nnull  = default (all lower-case except for L; see Digits)\ntrue  = upper-case\nfalse = lower-case\n"
    typeParameters:
    - id: T
      description: The integer type.
    return:
      type: System.String
      description: The string of digits.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToBase(Of T As IBinaryInteger(Of T))(n As T, radix As Byte, width As Integer = 1, letterCase As Boolean? = Nothing) As String
  overload: Galaxon.Core.Numbers.ConvertBase.ToBase*
  exceptions:
  - type: Galaxon.Core.Exceptions.ArgumentInvalidException
    commentId: T:Galaxon.Core.Exceptions.ArgumentInvalidException
    description: If T is an unsupported type.
  nameWithType.vb: ConvertBase.ToBase(Of T)(T, Byte, Int32, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.ConvertBase.ToBase(Of T)(T, System.Byte, System.Int32, System.Nullable(Of System.Boolean))
  name.vb: ToBase(Of T)(T, Byte, Int32, Nullable(Of Boolean))
- uid: Galaxon.Core.Numbers.ConvertBase.ToBase``1(``0,System.Byte,System.Nullable{System.Boolean})
  commentId: M:Galaxon.Core.Numbers.ConvertBase.ToBase``1(``0,System.Byte,System.Nullable{System.Boolean})
  id: ToBase``1(``0,System.Byte,System.Nullable{System.Boolean})
  isExtensionMethod: true
  parent: Galaxon.Core.Numbers.ConvertBase
  langs:
  - csharp
  - vb
  name: ToBase<T>(T, Byte, Nullable<Boolean>)
  nameWithType: ConvertBase.ToBase<T>(T, Byte, Nullable<Boolean>)
  fullName: Galaxon.Core.Numbers.ConvertBase.ToBase<T>(T, System.Byte, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: Numbers/ConvertBase.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: ToBase
    path: Numbers/ConvertBase.cs
    startLine: 188
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nVariation of ToBase() that allows the user to omit the width parameter.\n"
  example: []
  syntax:
    content: >-
      public static string ToBase<T>(this T n, byte radix, bool? letterCase)
          where T : IBinaryInteger<T>
    parameters:
    - id: n
      type: '{T}'
      description: The instance value.
    - id: radix
      type: System.Byte
      description: The base to convert to.
    - id: letterCase
      type: System.Nullable{System.Boolean}
      description: If letters should be lower-case, upper-case, or default.
    typeParameters:
    - id: T
      description: The integer type.
    return:
      type: System.String
      description: The string of digits.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToBase(Of T As IBinaryInteger(Of T))(n As T, radix As Byte, letterCase As Boolean?) As String
  overload: Galaxon.Core.Numbers.ConvertBase.ToBase*
  exceptions:
  - type: Galaxon.Core.Exceptions.ArgumentInvalidException
    commentId: T:Galaxon.Core.Exceptions.ArgumentInvalidException
    description: If T is an unsupported type.
  nameWithType.vb: ConvertBase.ToBase(Of T)(T, Byte, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.ConvertBase.ToBase(Of T)(T, System.Byte, System.Nullable(Of System.Boolean))
  name.vb: ToBase(Of T)(T, Byte, Nullable(Of Boolean))
- uid: Galaxon.Core.Numbers.ConvertBase.ToBin``1(``0,System.Int32)
  commentId: M:Galaxon.Core.Numbers.ConvertBase.ToBin``1(``0,System.Int32)
  id: ToBin``1(``0,System.Int32)
  isExtensionMethod: true
  parent: Galaxon.Core.Numbers.ConvertBase
  langs:
  - csharp
  - vb
  name: ToBin<T>(T, Int32)
  nameWithType: ConvertBase.ToBin<T>(T, Int32)
  fullName: Galaxon.Core.Numbers.ConvertBase.ToBin<T>(T, System.Int32)
  type: Method
  source:
    remote:
      path: Numbers/ConvertBase.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: ToBin
    path: Numbers/ConvertBase.cs
    startLine: 201
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nConvert an integer to binary digits.\n"
  example: []
  syntax:
    content: >-
      public static string ToBin<T>(this T n, int width = 1)
          where T : IBinaryInteger<T>
    parameters:
    - id: n
      type: '{T}'
      description: The integer to convert.
    - id: width
      type: System.Int32
      description: "\nThe minimum number of digits in the result. Extra 0s will be prepended if necessary to make\nup the width.\n"
    typeParameters:
    - id: T
    return:
      type: System.String
      description: The value as a string of binary digits.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToBin(Of T As IBinaryInteger(Of T))(n As T, width As Integer = 1) As String
  overload: Galaxon.Core.Numbers.ConvertBase.ToBin*
  nameWithType.vb: ConvertBase.ToBin(Of T)(T, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.ConvertBase.ToBin(Of T)(T, System.Int32)
  name.vb: ToBin(Of T)(T, Int32)
- uid: Galaxon.Core.Numbers.ConvertBase.ToQuat``1(``0,System.Int32)
  commentId: M:Galaxon.Core.Numbers.ConvertBase.ToQuat``1(``0,System.Int32)
  id: ToQuat``1(``0,System.Int32)
  isExtensionMethod: true
  parent: Galaxon.Core.Numbers.ConvertBase
  langs:
  - csharp
  - vb
  name: ToQuat<T>(T, Int32)
  nameWithType: ConvertBase.ToQuat<T>(T, Int32)
  fullName: Galaxon.Core.Numbers.ConvertBase.ToQuat<T>(T, System.Int32)
  type: Method
  source:
    remote:
      path: Numbers/ConvertBase.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: ToQuat
    path: Numbers/ConvertBase.cs
    startLine: 213
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nConvert integer to quaternary digits.\n"
  example: []
  syntax:
    content: >-
      public static string ToQuat<T>(this T n, int width = 1)
          where T : IBinaryInteger<T>
    parameters:
    - id: n
      type: '{T}'
      description: The integer to convert.
    - id: width
      type: System.Int32
      description: "\nThe minimum number of digits in the result. Extra 0s will be prepended if necessary to make\nup the width.\n"
    typeParameters:
    - id: T
    return:
      type: System.String
      description: The value as a string of quaternary digits.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToQuat(Of T As IBinaryInteger(Of T))(n As T, width As Integer = 1) As String
  overload: Galaxon.Core.Numbers.ConvertBase.ToQuat*
  nameWithType.vb: ConvertBase.ToQuat(Of T)(T, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.ConvertBase.ToQuat(Of T)(T, System.Int32)
  name.vb: ToQuat(Of T)(T, Int32)
- uid: Galaxon.Core.Numbers.ConvertBase.ToOct``1(``0,System.Int32)
  commentId: M:Galaxon.Core.Numbers.ConvertBase.ToOct``1(``0,System.Int32)
  id: ToOct``1(``0,System.Int32)
  isExtensionMethod: true
  parent: Galaxon.Core.Numbers.ConvertBase
  langs:
  - csharp
  - vb
  name: ToOct<T>(T, Int32)
  nameWithType: ConvertBase.ToOct<T>(T, Int32)
  fullName: Galaxon.Core.Numbers.ConvertBase.ToOct<T>(T, System.Int32)
  type: Method
  source:
    remote:
      path: Numbers/ConvertBase.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: ToOct
    path: Numbers/ConvertBase.cs
    startLine: 225
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nConvert integer to octal digits.\n"
  example: []
  syntax:
    content: >-
      public static string ToOct<T>(this T n, int width = 1)
          where T : IBinaryInteger<T>
    parameters:
    - id: n
      type: '{T}'
      description: The integer to convert.
    - id: width
      type: System.Int32
      description: "\nThe minimum number of digits in the result. Extra 0s will be prepended if necessary to make\nup the width.\n"
    typeParameters:
    - id: T
    return:
      type: System.String
      description: The value as a string of octal digits.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToOct(Of T As IBinaryInteger(Of T))(n As T, width As Integer = 1) As String
  overload: Galaxon.Core.Numbers.ConvertBase.ToOct*
  nameWithType.vb: ConvertBase.ToOct(Of T)(T, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.ConvertBase.ToOct(Of T)(T, System.Int32)
  name.vb: ToOct(Of T)(T, Int32)
- uid: Galaxon.Core.Numbers.ConvertBase.ToHex``1(``0,System.Int32,System.Nullable{System.Boolean})
  commentId: M:Galaxon.Core.Numbers.ConvertBase.ToHex``1(``0,System.Int32,System.Nullable{System.Boolean})
  id: ToHex``1(``0,System.Int32,System.Nullable{System.Boolean})
  isExtensionMethod: true
  parent: Galaxon.Core.Numbers.ConvertBase
  langs:
  - csharp
  - vb
  name: ToHex<T>(T, Int32, Nullable<Boolean>)
  nameWithType: ConvertBase.ToHex<T>(T, Int32, Nullable<Boolean>)
  fullName: Galaxon.Core.Numbers.ConvertBase.ToHex<T>(T, System.Int32, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: Numbers/ConvertBase.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: ToHex
    path: Numbers/ConvertBase.cs
    startLine: 238
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nConvert integer to hexadecimal digits.\n"
  example: []
  syntax:
    content: >-
      public static string ToHex<T>(this T n, int width = 1, bool? letterCase = null)
          where T : IBinaryInteger<T>
    parameters:
    - id: n
      type: '{T}'
      description: The integer to convert.
    - id: width
      type: System.Int32
      description: "\nThe minimum number of digits in the result. Extra 0s will be prepended if necessary to make\nup the width.\n"
    - id: letterCase
      type: System.Nullable{System.Boolean}
      description: If letters should be lower-case, upper-case, or default.
    typeParameters:
    - id: T
    return:
      type: System.String
      description: The value as a string of hexadecimal digits.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToHex(Of T As IBinaryInteger(Of T))(n As T, width As Integer = 1, letterCase As Boolean? = Nothing) As String
  overload: Galaxon.Core.Numbers.ConvertBase.ToHex*
  nameWithType.vb: ConvertBase.ToHex(Of T)(T, Int32, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.ConvertBase.ToHex(Of T)(T, System.Int32, System.Nullable(Of System.Boolean))
  name.vb: ToHex(Of T)(T, Int32, Nullable(Of Boolean))
- uid: Galaxon.Core.Numbers.ConvertBase.ToTria``1(``0,System.Int32,System.Nullable{System.Boolean})
  commentId: M:Galaxon.Core.Numbers.ConvertBase.ToTria``1(``0,System.Int32,System.Nullable{System.Boolean})
  id: ToTria``1(``0,System.Int32,System.Nullable{System.Boolean})
  isExtensionMethod: true
  parent: Galaxon.Core.Numbers.ConvertBase
  langs:
  - csharp
  - vb
  name: ToTria<T>(T, Int32, Nullable<Boolean>)
  nameWithType: ConvertBase.ToTria<T>(T, Int32, Nullable<Boolean>)
  fullName: Galaxon.Core.Numbers.ConvertBase.ToTria<T>(T, System.Int32, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: Numbers/ConvertBase.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: ToTria
    path: Numbers/ConvertBase.cs
    startLine: 252
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nConvert integer to triacontakaidecimal digits.\n"
  example: []
  syntax:
    content: >-
      public static string ToTria<T>(this T n, int width = 1, bool? letterCase = null)
          where T : IBinaryInteger<T>
    parameters:
    - id: n
      type: '{T}'
      description: The integer to convert.
    - id: width
      type: System.Int32
      description: "\nThe minimum number of digits in the result. Extra 0s will be prepended if necessary to make\nup the width.\n"
    - id: letterCase
      type: System.Nullable{System.Boolean}
      description: If letters should be lower-case, upper-case, or default.
    typeParameters:
    - id: T
    return:
      type: System.String
      description: The value as a string of triacontakaidecimal digits.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToTria(Of T As IBinaryInteger(Of T))(n As T, width As Integer = 1, letterCase As Boolean? = Nothing) As String
  overload: Galaxon.Core.Numbers.ConvertBase.ToTria*
  nameWithType.vb: ConvertBase.ToTria(Of T)(T, Int32, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.ConvertBase.ToTria(Of T)(T, System.Int32, System.Nullable(Of System.Boolean))
  name.vb: ToTria(Of T)(T, Int32, Nullable(Of Boolean))
- uid: Galaxon.Core.Numbers.ConvertBase.ToTetra``1(``0,System.Int32,System.Nullable{System.Boolean})
  commentId: M:Galaxon.Core.Numbers.ConvertBase.ToTetra``1(``0,System.Int32,System.Nullable{System.Boolean})
  id: ToTetra``1(``0,System.Int32,System.Nullable{System.Boolean})
  isExtensionMethod: true
  parent: Galaxon.Core.Numbers.ConvertBase
  langs:
  - csharp
  - vb
  name: ToTetra<T>(T, Int32, Nullable<Boolean>)
  nameWithType: ConvertBase.ToTetra<T>(T, Int32, Nullable<Boolean>)
  fullName: Galaxon.Core.Numbers.ConvertBase.ToTetra<T>(T, System.Int32, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: Numbers/ConvertBase.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: ToTetra
    path: Numbers/ConvertBase.cs
    startLine: 266
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nConvert integer to tetrasexagesimal digits.\n"
  example: []
  syntax:
    content: >-
      public static string ToTetra<T>(this T n, int width = 1, bool? letterCase = null)
          where T : IBinaryInteger<T>
    parameters:
    - id: n
      type: '{T}'
      description: The integer to convert.
    - id: width
      type: System.Int32
      description: "\nThe minimum number of digits in the result. Extra 0s will be prepended if necessary to make\nup the width.\n"
    - id: letterCase
      type: System.Nullable{System.Boolean}
      description: If letters should be lower-case, upper-case, or default.
    typeParameters:
    - id: T
    return:
      type: System.String
      description: The value as a string of tetrasexagesimal digits.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToTetra(Of T As IBinaryInteger(Of T))(n As T, width As Integer = 1, letterCase As Boolean? = Nothing) As String
  overload: Galaxon.Core.Numbers.ConvertBase.ToTetra*
  nameWithType.vb: ConvertBase.ToTetra(Of T)(T, Int32, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.ConvertBase.ToTetra(Of T)(T, System.Int32, System.Nullable(Of System.Boolean))
  name.vb: ToTetra(Of T)(T, Int32, Nullable(Of Boolean))
- uid: Galaxon.Core.Numbers.ConvertBase.FromBase``1(System.String,System.Byte)
  commentId: M:Galaxon.Core.Numbers.ConvertBase.FromBase``1(System.String,System.Byte)
  id: FromBase``1(System.String,System.Byte)
  parent: Galaxon.Core.Numbers.ConvertBase
  langs:
  - csharp
  - vb
  name: FromBase<T>(String, Byte)
  nameWithType: ConvertBase.FromBase<T>(String, Byte)
  fullName: Galaxon.Core.Numbers.ConvertBase.FromBase<T>(System.String, System.Byte)
  type: Method
  source:
    remote:
      path: Numbers/ConvertBase.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: FromBase
    path: Numbers/ConvertBase.cs
    startLine: 286
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nConvert a string of digits in a given base into a int.\n"
  example: []
  syntax:
    content: >-
      public static T FromBase<T>(string digits, byte radix)
          where T : IBinaryInteger<T>
    parameters:
    - id: digits
      type: System.String
    - id: radix
      type: System.Byte
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function FromBase(Of T As IBinaryInteger(Of T))(digits As String, radix As Byte) As T
  overload: Galaxon.Core.Numbers.ConvertBase.FromBase*
  exceptions:
  - type: Galaxon.Core.Exceptions.ArgumentFormatException
    commentId: T:Galaxon.Core.Exceptions.ArgumentFormatException
    description: "\nIf the digits string contains invalid characters.\n"
  nameWithType.vb: ConvertBase.FromBase(Of T)(String, Byte)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.ConvertBase.FromBase(Of T)(System.String, System.Byte)
  name.vb: FromBase(Of T)(String, Byte)
- uid: Galaxon.Core.Numbers.ConvertBase.FromBin``1(System.String)
  commentId: M:Galaxon.Core.Numbers.ConvertBase.FromBin``1(System.String)
  id: FromBin``1(System.String)
  parent: Galaxon.Core.Numbers.ConvertBase
  langs:
  - csharp
  - vb
  name: FromBin<T>(String)
  nameWithType: ConvertBase.FromBin<T>(String)
  fullName: Galaxon.Core.Numbers.ConvertBase.FromBin<T>(System.String)
  type: Method
  source:
    remote:
      path: Numbers/ConvertBase.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: FromBin
    path: Numbers/ConvertBase.cs
    startLine: 353
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nConvert a string of binary digits into an integer.\n"
  example: []
  syntax:
    content: >-
      public static T FromBin<T>(string digits)
          where T : IBinaryInteger<T>
    parameters:
    - id: digits
      type: System.String
      description: The string of digits to parse.
    typeParameters:
    - id: T
      description: The integer type to create.
    return:
      type: '{T}'
      description: The integer equivalent of the digits.
    content.vb: Public Shared Function FromBin(Of T As IBinaryInteger(Of T))(digits As String) As T
  overload: Galaxon.Core.Numbers.ConvertBase.FromBin*
  nameWithType.vb: ConvertBase.FromBin(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.ConvertBase.FromBin(Of T)(System.String)
  name.vb: FromBin(Of T)(String)
- uid: Galaxon.Core.Numbers.ConvertBase.FromQuat``1(System.String)
  commentId: M:Galaxon.Core.Numbers.ConvertBase.FromQuat``1(System.String)
  id: FromQuat``1(System.String)
  parent: Galaxon.Core.Numbers.ConvertBase
  langs:
  - csharp
  - vb
  name: FromQuat<T>(String)
  nameWithType: ConvertBase.FromQuat<T>(String)
  fullName: Galaxon.Core.Numbers.ConvertBase.FromQuat<T>(System.String)
  type: Method
  source:
    remote:
      path: Numbers/ConvertBase.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: FromQuat
    path: Numbers/ConvertBase.cs
    startLine: 362
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nConvert a string of quaternary digits into an integer.\n"
  example: []
  syntax:
    content: >-
      public static T FromQuat<T>(string digits)
          where T : IBinaryInteger<T>
    parameters:
    - id: digits
      type: System.String
      description: The string of digits to parse.
    typeParameters:
    - id: T
      description: The integer type to create.
    return:
      type: '{T}'
      description: The integer equivalent of the digits.
    content.vb: Public Shared Function FromQuat(Of T As IBinaryInteger(Of T))(digits As String) As T
  overload: Galaxon.Core.Numbers.ConvertBase.FromQuat*
  nameWithType.vb: ConvertBase.FromQuat(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.ConvertBase.FromQuat(Of T)(System.String)
  name.vb: FromQuat(Of T)(String)
- uid: Galaxon.Core.Numbers.ConvertBase.FromOct``1(System.String)
  commentId: M:Galaxon.Core.Numbers.ConvertBase.FromOct``1(System.String)
  id: FromOct``1(System.String)
  parent: Galaxon.Core.Numbers.ConvertBase
  langs:
  - csharp
  - vb
  name: FromOct<T>(String)
  nameWithType: ConvertBase.FromOct<T>(String)
  fullName: Galaxon.Core.Numbers.ConvertBase.FromOct<T>(System.String)
  type: Method
  source:
    remote:
      path: Numbers/ConvertBase.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: FromOct
    path: Numbers/ConvertBase.cs
    startLine: 371
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nConvert a string of octal digits into an integer.\n"
  example: []
  syntax:
    content: >-
      public static T FromOct<T>(string digits)
          where T : IBinaryInteger<T>
    parameters:
    - id: digits
      type: System.String
      description: The string of digits to parse.
    typeParameters:
    - id: T
      description: The integer type to create.
    return:
      type: '{T}'
      description: The integer equivalent of the digits.
    content.vb: Public Shared Function FromOct(Of T As IBinaryInteger(Of T))(digits As String) As T
  overload: Galaxon.Core.Numbers.ConvertBase.FromOct*
  nameWithType.vb: ConvertBase.FromOct(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.ConvertBase.FromOct(Of T)(System.String)
  name.vb: FromOct(Of T)(String)
- uid: Galaxon.Core.Numbers.ConvertBase.FromHex``1(System.String)
  commentId: M:Galaxon.Core.Numbers.ConvertBase.FromHex``1(System.String)
  id: FromHex``1(System.String)
  parent: Galaxon.Core.Numbers.ConvertBase
  langs:
  - csharp
  - vb
  name: FromHex<T>(String)
  nameWithType: ConvertBase.FromHex<T>(String)
  fullName: Galaxon.Core.Numbers.ConvertBase.FromHex<T>(System.String)
  type: Method
  source:
    remote:
      path: Numbers/ConvertBase.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: FromHex
    path: Numbers/ConvertBase.cs
    startLine: 380
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nConvert a string of hexadecimal digits into an integer.\n"
  example: []
  syntax:
    content: >-
      public static T FromHex<T>(string digits)
          where T : IBinaryInteger<T>
    parameters:
    - id: digits
      type: System.String
      description: The string of digits to parse.
    typeParameters:
    - id: T
      description: The integer type to create.
    return:
      type: '{T}'
      description: The integer equivalent of the digits.
    content.vb: Public Shared Function FromHex(Of T As IBinaryInteger(Of T))(digits As String) As T
  overload: Galaxon.Core.Numbers.ConvertBase.FromHex*
  nameWithType.vb: ConvertBase.FromHex(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.ConvertBase.FromHex(Of T)(System.String)
  name.vb: FromHex(Of T)(String)
- uid: Galaxon.Core.Numbers.ConvertBase.FromTria``1(System.String)
  commentId: M:Galaxon.Core.Numbers.ConvertBase.FromTria``1(System.String)
  id: FromTria``1(System.String)
  parent: Galaxon.Core.Numbers.ConvertBase
  langs:
  - csharp
  - vb
  name: FromTria<T>(String)
  nameWithType: ConvertBase.FromTria<T>(String)
  fullName: Galaxon.Core.Numbers.ConvertBase.FromTria<T>(System.String)
  type: Method
  source:
    remote:
      path: Numbers/ConvertBase.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: FromTria
    path: Numbers/ConvertBase.cs
    startLine: 389
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nConvert a string of triacontakaidecimal digits into an integer.\n"
  example: []
  syntax:
    content: >-
      public static T FromTria<T>(string digits)
          where T : IBinaryInteger<T>
    parameters:
    - id: digits
      type: System.String
      description: The string of digits to parse.
    typeParameters:
    - id: T
      description: The integer type to create.
    return:
      type: '{T}'
      description: The integer equivalent of the digits.
    content.vb: Public Shared Function FromTria(Of T As IBinaryInteger(Of T))(digits As String) As T
  overload: Galaxon.Core.Numbers.ConvertBase.FromTria*
  nameWithType.vb: ConvertBase.FromTria(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.ConvertBase.FromTria(Of T)(System.String)
  name.vb: FromTria(Of T)(String)
- uid: Galaxon.Core.Numbers.ConvertBase.FromTetra``1(System.String)
  commentId: M:Galaxon.Core.Numbers.ConvertBase.FromTetra``1(System.String)
  id: FromTetra``1(System.String)
  parent: Galaxon.Core.Numbers.ConvertBase
  langs:
  - csharp
  - vb
  name: FromTetra<T>(String)
  nameWithType: ConvertBase.FromTetra<T>(String)
  fullName: Galaxon.Core.Numbers.ConvertBase.FromTetra<T>(System.String)
  type: Method
  source:
    remote:
      path: Numbers/ConvertBase.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: FromTetra
    path: Numbers/ConvertBase.cs
    startLine: 398
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nConvert a string of tetrasexagesimal digits into an integer.\n"
  example: []
  syntax:
    content: >-
      public static T FromTetra<T>(string digits)
          where T : IBinaryInteger<T>
    parameters:
    - id: digits
      type: System.String
      description: The string of digits to parse.
    typeParameters:
    - id: T
      description: The integer type to create.
    return:
      type: '{T}'
      description: The integer equivalent of the digits.
    content.vb: Public Shared Function FromTetra(Of T As IBinaryInteger(Of T))(digits As String) As T
  overload: Galaxon.Core.Numbers.ConvertBase.FromTetra*
  nameWithType.vb: ConvertBase.FromTetra(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.ConvertBase.FromTetra(Of T)(System.String)
  name.vb: FromTetra(Of T)(String)
references:
- uid: Galaxon.Core.Numbers
  commentId: N:Galaxon.Core.Numbers
  name: Galaxon.Core.Numbers
  nameWithType: Galaxon.Core.Numbers
  fullName: Galaxon.Core.Numbers
- uid: System.Object
  commentId: '!:System.Object'
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Galaxon.Core.Exceptions.ArgumentInvalidException
  commentId: T:Galaxon.Core.Exceptions.ArgumentInvalidException
  name: ArgumentInvalidException
  nameWithType: ArgumentInvalidException
  fullName: Galaxon.Core.Exceptions.ArgumentInvalidException
- uid: Galaxon.Core.Numbers.ConvertBase.ToBase*
  commentId: Overload:Galaxon.Core.Numbers.ConvertBase.ToBase
  name: ToBase
  nameWithType: ConvertBase.ToBase
  fullName: Galaxon.Core.Numbers.ConvertBase.ToBase
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Byte
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Nullable{System.Boolean}
  commentId: '!:System.Nullable{System.Boolean}'
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Core.Numbers.ConvertBase.ToBin*
  commentId: Overload:Galaxon.Core.Numbers.ConvertBase.ToBin
  name: ToBin
  nameWithType: ConvertBase.ToBin
  fullName: Galaxon.Core.Numbers.ConvertBase.ToBin
- uid: Galaxon.Core.Numbers.ConvertBase.ToQuat*
  commentId: Overload:Galaxon.Core.Numbers.ConvertBase.ToQuat
  name: ToQuat
  nameWithType: ConvertBase.ToQuat
  fullName: Galaxon.Core.Numbers.ConvertBase.ToQuat
- uid: Galaxon.Core.Numbers.ConvertBase.ToOct*
  commentId: Overload:Galaxon.Core.Numbers.ConvertBase.ToOct
  name: ToOct
  nameWithType: ConvertBase.ToOct
  fullName: Galaxon.Core.Numbers.ConvertBase.ToOct
- uid: Galaxon.Core.Numbers.ConvertBase.ToHex*
  commentId: Overload:Galaxon.Core.Numbers.ConvertBase.ToHex
  name: ToHex
  nameWithType: ConvertBase.ToHex
  fullName: Galaxon.Core.Numbers.ConvertBase.ToHex
- uid: Galaxon.Core.Numbers.ConvertBase.ToTria*
  commentId: Overload:Galaxon.Core.Numbers.ConvertBase.ToTria
  name: ToTria
  nameWithType: ConvertBase.ToTria
  fullName: Galaxon.Core.Numbers.ConvertBase.ToTria
- uid: Galaxon.Core.Numbers.ConvertBase.ToTetra*
  commentId: Overload:Galaxon.Core.Numbers.ConvertBase.ToTetra
  name: ToTetra
  nameWithType: ConvertBase.ToTetra
  fullName: Galaxon.Core.Numbers.ConvertBase.ToTetra
- uid: Galaxon.Core.Exceptions.ArgumentFormatException
  commentId: T:Galaxon.Core.Exceptions.ArgumentFormatException
  name: ArgumentFormatException
  nameWithType: ArgumentFormatException
  fullName: Galaxon.Core.Exceptions.ArgumentFormatException
- uid: Galaxon.Core.Numbers.ConvertBase.FromBase*
  commentId: Overload:Galaxon.Core.Numbers.ConvertBase.FromBase
  name: FromBase
  nameWithType: ConvertBase.FromBase
  fullName: Galaxon.Core.Numbers.ConvertBase.FromBase
- uid: Galaxon.Core.Numbers.ConvertBase.FromBin*
  commentId: Overload:Galaxon.Core.Numbers.ConvertBase.FromBin
  name: FromBin
  nameWithType: ConvertBase.FromBin
  fullName: Galaxon.Core.Numbers.ConvertBase.FromBin
- uid: Galaxon.Core.Numbers.ConvertBase.FromQuat*
  commentId: Overload:Galaxon.Core.Numbers.ConvertBase.FromQuat
  name: FromQuat
  nameWithType: ConvertBase.FromQuat
  fullName: Galaxon.Core.Numbers.ConvertBase.FromQuat
- uid: Galaxon.Core.Numbers.ConvertBase.FromOct*
  commentId: Overload:Galaxon.Core.Numbers.ConvertBase.FromOct
  name: FromOct
  nameWithType: ConvertBase.FromOct
  fullName: Galaxon.Core.Numbers.ConvertBase.FromOct
- uid: Galaxon.Core.Numbers.ConvertBase.FromHex*
  commentId: Overload:Galaxon.Core.Numbers.ConvertBase.FromHex
  name: FromHex
  nameWithType: ConvertBase.FromHex
  fullName: Galaxon.Core.Numbers.ConvertBase.FromHex
- uid: Galaxon.Core.Numbers.ConvertBase.FromTria*
  commentId: Overload:Galaxon.Core.Numbers.ConvertBase.FromTria
  name: FromTria
  nameWithType: ConvertBase.FromTria
  fullName: Galaxon.Core.Numbers.ConvertBase.FromTria
- uid: Galaxon.Core.Numbers.ConvertBase.FromTetra*
  commentId: Overload:Galaxon.Core.Numbers.ConvertBase.FromTetra
  name: FromTetra
  nameWithType: ConvertBase.FromTetra
  fullName: Galaxon.Core.Numbers.ConvertBase.FromTetra
