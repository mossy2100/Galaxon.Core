### YamlMime:ManagedReference
items:
- uid: Galaxon.Core.Numbers.XLong
  commentId: T:Galaxon.Core.Numbers.XLong
  id: XLong
  parent: Galaxon.Core.Numbers
  children:
  - Galaxon.Core.Numbers.XLong.Pow(System.Int64,System.Int64)
  - Galaxon.Core.Numbers.XLong.Sqrt(System.Int64)
  langs:
  - csharp
  - vb
  name: XLong
  nameWithType: XLong
  fullName: Galaxon.Core.Numbers.XLong
  type: Class
  source:
    remote:
      path: Numbers/XLong.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: XLong
    path: Numbers/XLong.cs
    startLine: 2
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  syntax:
    content: 'public static class XLong : object'
    content.vb: >-
      Public Module XLong
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Galaxon.Core.Numbers.XLong.Pow(System.Int64,System.Int64)
  commentId: M:Galaxon.Core.Numbers.XLong.Pow(System.Int64,System.Int64)
  id: Pow(System.Int64,System.Int64)
  parent: Galaxon.Core.Numbers.XLong
  langs:
  - csharp
  - vb
  name: Pow(Int64, Int64)
  nameWithType: XLong.Pow(Int64, Int64)
  fullName: Galaxon.Core.Numbers.XLong.Pow(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: Numbers/XLong.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Pow
    path: Numbers/XLong.cs
    startLine: 10
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nGet the long value closest to x^y.\n"
  example: []
  syntax:
    content: public static long Pow(long x, long y)
    parameters:
    - id: x
      type: System.Int64
      description: ''
    - id: y
      type: System.Int64
      description: ''
    return:
      type: System.Int64
      description: ''
    content.vb: Public Shared Function Pow(x As Long, y As Long) As Long
  overload: Galaxon.Core.Numbers.XLong.Pow*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XLong.Sqrt(System.Int64)
  commentId: M:Galaxon.Core.Numbers.XLong.Sqrt(System.Int64)
  id: Sqrt(System.Int64)
  parent: Galaxon.Core.Numbers.XLong
  langs:
  - csharp
  - vb
  name: Sqrt(Int64)
  nameWithType: XLong.Sqrt(Int64)
  fullName: Galaxon.Core.Numbers.XLong.Sqrt(System.Int64)
  type: Method
  source:
    remote:
      path: Numbers/XLong.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Sqrt
    path: Numbers/XLong.cs
    startLine: 18
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nGet the long value closest to âˆšx.\n"
  example: []
  syntax:
    content: public static long Sqrt(long x)
    parameters:
    - id: x
      type: System.Int64
      description: ''
    return:
      type: System.Int64
      description: ''
    content.vb: Public Shared Function Sqrt(x As Long) As Long
  overload: Galaxon.Core.Numbers.XLong.Sqrt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Galaxon.Core.Numbers
  commentId: N:Galaxon.Core.Numbers
  name: Galaxon.Core.Numbers
  nameWithType: Galaxon.Core.Numbers
  fullName: Galaxon.Core.Numbers
- uid: System.Object
  commentId: '!:System.Object'
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Galaxon.Core.Numbers.XLong.Pow*
  commentId: Overload:Galaxon.Core.Numbers.XLong.Pow
  name: Pow
  nameWithType: XLong.Pow
  fullName: Galaxon.Core.Numbers.XLong.Pow
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Galaxon.Core.Numbers.XLong.Sqrt*
  commentId: Overload:Galaxon.Core.Numbers.XLong.Sqrt
  name: Sqrt
  nameWithType: XLong.Sqrt
  fullName: Galaxon.Core.Numbers.XLong.Sqrt
