### YamlMime:ManagedReference
items:
- uid: Galaxon.Core.Numbers.XBigInteger
  commentId: T:Galaxon.Core.Numbers.XBigInteger
  id: XBigInteger
  parent: Galaxon.Core.Numbers
  children:
  - Galaxon.Core.Numbers.XBigInteger.DigitSum(BigInteger)
  - Galaxon.Core.Numbers.XBigInteger.IsPalindromic(BigInteger)
  - Galaxon.Core.Numbers.XBigInteger.NumDigits(BigInteger)
  - Galaxon.Core.Numbers.XBigInteger.Reverse(BigInteger)
  - Galaxon.Core.Numbers.XBigInteger.Sum(IEnumerable{BigInteger})
  - Galaxon.Core.Numbers.XBigInteger.ToUnsigned(BigInteger)
  langs:
  - csharp
  - vb
  name: XBigInteger
  nameWithType: XBigInteger
  fullName: Galaxon.Core.Numbers.XBigInteger
  type: Class
  source:
    remote:
      path: Numbers/XBigInteger.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: XBigInteger
    path: ../../../Core/Numbers/XBigInteger.cs
    startLine: 7
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nExtension methods for BigInteger.\n"
  example: []
  syntax:
    content: 'public static class XBigInteger : object'
    content.vb: >-
      Public Module XBigInteger

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Galaxon.Core.Numbers.XBigInteger.Reverse(BigInteger)
  commentId: M:Galaxon.Core.Numbers.XBigInteger.Reverse(BigInteger)
  id: Reverse(BigInteger)
  isExtensionMethod: true
  parent: Galaxon.Core.Numbers.XBigInteger
  langs:
  - csharp
  - vb
  name: Reverse(BigInteger)
  nameWithType: XBigInteger.Reverse(BigInteger)
  fullName: Galaxon.Core.Numbers.XBigInteger.Reverse(BigInteger)
  type: Method
  source:
    remote:
      path: Numbers/XBigInteger.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Reverse
    path: ../../../Core/Numbers/XBigInteger.cs
    startLine: 15
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nReverse a BigInteger.\ne.g. 123 becomes 321.\n"
  example: []
  syntax:
    content: public static BigInteger Reverse(this BigInteger n)
    parameters:
    - id: n
      type: BigInteger
    return:
      type: BigInteger
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Reverse(n As BigInteger) As BigInteger
  overload: Galaxon.Core.Numbers.XBigInteger.Reverse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XBigInteger.IsPalindromic(BigInteger)
  commentId: M:Galaxon.Core.Numbers.XBigInteger.IsPalindromic(BigInteger)
  id: IsPalindromic(BigInteger)
  isExtensionMethod: true
  parent: Galaxon.Core.Numbers.XBigInteger
  langs:
  - csharp
  - vb
  name: IsPalindromic(BigInteger)
  nameWithType: XBigInteger.IsPalindromic(BigInteger)
  fullName: Galaxon.Core.Numbers.XBigInteger.IsPalindromic(BigInteger)
  type: Method
  source:
    remote:
      path: Numbers/XBigInteger.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: IsPalindromic
    path: ../../../Core/Numbers/XBigInteger.cs
    startLine: 21
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nCheck if a number is palindromic.\n"
  example: []
  syntax:
    content: public static bool IsPalindromic(this BigInteger n)
    parameters:
    - id: n
      type: BigInteger
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsPalindromic(n As BigInteger) As Boolean
  overload: Galaxon.Core.Numbers.XBigInteger.IsPalindromic*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XBigInteger.DigitSum(BigInteger)
  commentId: M:Galaxon.Core.Numbers.XBigInteger.DigitSum(BigInteger)
  id: DigitSum(BigInteger)
  isExtensionMethod: true
  parent: Galaxon.Core.Numbers.XBigInteger
  langs:
  - csharp
  - vb
  name: DigitSum(BigInteger)
  nameWithType: XBigInteger.DigitSum(BigInteger)
  fullName: Galaxon.Core.Numbers.XBigInteger.DigitSum(BigInteger)
  type: Method
  source:
    remote:
      path: Numbers/XBigInteger.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: DigitSum
    path: ../../../Core/Numbers/XBigInteger.cs
    startLine: 28
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nSum of the digits in a BigInteger.\nIf present, a negative sign is ignored.\n"
  example: []
  syntax:
    content: public static BigInteger DigitSum(this BigInteger n)
    parameters:
    - id: n
      type: BigInteger
    return:
      type: BigInteger
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DigitSum(n As BigInteger) As BigInteger
  overload: Galaxon.Core.Numbers.XBigInteger.DigitSum*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XBigInteger.NumDigits(BigInteger)
  commentId: M:Galaxon.Core.Numbers.XBigInteger.NumDigits(BigInteger)
  id: NumDigits(BigInteger)
  isExtensionMethod: true
  parent: Galaxon.Core.Numbers.XBigInteger
  langs:
  - csharp
  - vb
  name: NumDigits(BigInteger)
  nameWithType: XBigInteger.NumDigits(BigInteger)
  fullName: Galaxon.Core.Numbers.XBigInteger.NumDigits(BigInteger)
  type: Method
  source:
    remote:
      path: Numbers/XBigInteger.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: NumDigits
    path: ../../../Core/Numbers/XBigInteger.cs
    startLine: 34
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nGet the number of digits in the BigInteger.\n"
  example: []
  syntax:
    content: public static int NumDigits(this BigInteger n)
    parameters:
    - id: n
      type: BigInteger
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NumDigits(n As BigInteger) As Integer
  overload: Galaxon.Core.Numbers.XBigInteger.NumDigits*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XBigInteger.ToUnsigned(BigInteger)
  commentId: M:Galaxon.Core.Numbers.XBigInteger.ToUnsigned(BigInteger)
  id: ToUnsigned(BigInteger)
  isExtensionMethod: true
  parent: Galaxon.Core.Numbers.XBigInteger
  langs:
  - csharp
  - vb
  name: ToUnsigned(BigInteger)
  nameWithType: XBigInteger.ToUnsigned(BigInteger)
  fullName: Galaxon.Core.Numbers.XBigInteger.ToUnsigned(BigInteger)
  type: Method
  source:
    remote:
      path: Numbers/XBigInteger.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: ToUnsigned
    path: ../../../Core/Numbers/XBigInteger.cs
    startLine: 63
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nGet the unsigned, 2s-complement version of the value, containing the fewest number of bytes.\n"
  example: []
  syntax:
    content: public static BigInteger ToUnsigned(this BigInteger n)
    parameters:
    - id: n
      type: BigInteger
    return:
      type: BigInteger
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToUnsigned(n As BigInteger) As BigInteger
  overload: Galaxon.Core.Numbers.XBigInteger.ToUnsigned*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Numbers.XBigInteger.Sum(IEnumerable{BigInteger})
  commentId: M:Galaxon.Core.Numbers.XBigInteger.Sum(IEnumerable{BigInteger})
  id: Sum(IEnumerable{BigInteger})
  isExtensionMethod: true
  parent: Galaxon.Core.Numbers.XBigInteger
  langs:
  - csharp
  - vb
  name: Sum(IEnumerable<BigInteger>)
  nameWithType: XBigInteger.Sum(IEnumerable<BigInteger>)
  fullName: Galaxon.Core.Numbers.XBigInteger.Sum(IEnumerable<BigInteger>)
  type: Method
  source:
    remote:
      path: Numbers/XBigInteger.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Sum
    path: ../../../Core/Numbers/XBigInteger.cs
    startLine: 92
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nSum all the values in a list of BigIntegers.\n"
  example: []
  syntax:
    content: public static BigInteger Sum(this IEnumerable<BigInteger> nums)
    parameters:
    - id: nums
      type: IEnumerable{BigInteger}
    return:
      type: BigInteger
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(nums As IEnumerable(Of BigInteger)) As BigInteger
  overload: Galaxon.Core.Numbers.XBigInteger.Sum*
  nameWithType.vb: XBigInteger.Sum(IEnumerable(Of BigInteger))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.XBigInteger.Sum(IEnumerable(Of BigInteger))
  name.vb: Sum(IEnumerable(Of BigInteger))
references:
- uid: Galaxon.Core.Numbers
  commentId: N:Galaxon.Core.Numbers
  name: Galaxon.Core.Numbers
  nameWithType: Galaxon.Core.Numbers
  fullName: Galaxon.Core.Numbers
- uid: Galaxon.Core.Numbers.XBigInteger.Reverse*
  commentId: Overload:Galaxon.Core.Numbers.XBigInteger.Reverse
  name: Reverse
  nameWithType: XBigInteger.Reverse
  fullName: Galaxon.Core.Numbers.XBigInteger.Reverse
- uid: BigInteger
  isExternal: true
  name: BigInteger
  nameWithType: BigInteger
  fullName: BigInteger
- uid: Galaxon.Core.Numbers.XBigInteger.IsPalindromic*
  commentId: Overload:Galaxon.Core.Numbers.XBigInteger.IsPalindromic
  name: IsPalindromic
  nameWithType: XBigInteger.IsPalindromic
  fullName: Galaxon.Core.Numbers.XBigInteger.IsPalindromic
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Galaxon.Core.Numbers.XBigInteger.DigitSum*
  commentId: Overload:Galaxon.Core.Numbers.XBigInteger.DigitSum
  name: DigitSum
  nameWithType: XBigInteger.DigitSum
  fullName: Galaxon.Core.Numbers.XBigInteger.DigitSum
- uid: Galaxon.Core.Numbers.XBigInteger.NumDigits*
  commentId: Overload:Galaxon.Core.Numbers.XBigInteger.NumDigits
  name: NumDigits
  nameWithType: XBigInteger.NumDigits
  fullName: Galaxon.Core.Numbers.XBigInteger.NumDigits
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Galaxon.Core.Numbers.XBigInteger.ToUnsigned*
  commentId: Overload:Galaxon.Core.Numbers.XBigInteger.ToUnsigned
  name: ToUnsigned
  nameWithType: XBigInteger.ToUnsigned
  fullName: Galaxon.Core.Numbers.XBigInteger.ToUnsigned
- uid: Galaxon.Core.Numbers.XBigInteger.Sum*
  commentId: Overload:Galaxon.Core.Numbers.XBigInteger.Sum
  name: Sum
  nameWithType: XBigInteger.Sum
  fullName: Galaxon.Core.Numbers.XBigInteger.Sum
- uid: IEnumerable{BigInteger}
  commentId: '!:IEnumerable{BigInteger}'
  definition: IEnumerable`1
  name: IEnumerable<BigInteger>
  nameWithType: IEnumerable<BigInteger>
  fullName: IEnumerable<BigInteger>
  nameWithType.vb: IEnumerable(Of BigInteger)
  fullName.vb: IEnumerable(Of BigInteger)
  name.vb: IEnumerable(Of BigInteger)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: BigInteger
    name: BigInteger
    nameWithType: BigInteger
    fullName: BigInteger
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: BigInteger
    name: BigInteger
    nameWithType: BigInteger
    fullName: BigInteger
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
