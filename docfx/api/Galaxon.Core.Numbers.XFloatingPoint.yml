### YamlMime:ManagedReference
items:
- uid: Galaxon.Core.Numbers.XFloatingPoint
  commentId: T:Galaxon.Core.Numbers.XFloatingPoint
  id: XFloatingPoint
  parent: Galaxon.Core.Numbers
  children:
  - Galaxon.Core.Numbers.XFloatingPoint.Disassemble``1(``0)
  - Galaxon.Core.Numbers.XFloatingPoint.GetStructure``1(``0)
  langs:
  - csharp
  - vb
  name: XFloatingPoint
  nameWithType: XFloatingPoint
  fullName: Galaxon.Core.Numbers.XFloatingPoint
  type: Class
  source:
    remote:
      path: Numbers/XFloatingPoint.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: XFloatingPoint
    path: ../../../Core/Numbers/XFloatingPoint.cs
    startLine: 7
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nExtension methods for IFloatingPoint{T}.\n"
  example: []
  syntax:
    content: 'public static class XFloatingPoint : object'
    content.vb: >-
      Public Module XFloatingPoint

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Galaxon.Core.Numbers.XFloatingPoint.GetStructure``1(``0)
  commentId: M:Galaxon.Core.Numbers.XFloatingPoint.GetStructure``1(``0)
  id: GetStructure``1(``0)
  isExtensionMethod: true
  parent: Galaxon.Core.Numbers.XFloatingPoint
  langs:
  - csharp
  - vb
  name: GetStructure<T>(T)
  nameWithType: XFloatingPoint.GetStructure<T>(T)
  fullName: Galaxon.Core.Numbers.XFloatingPoint.GetStructure<T>(T)
  type: Method
  source:
    remote:
      path: Numbers/XFloatingPoint.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: GetStructure
    path: ../../../Core/Numbers/XFloatingPoint.cs
    startLine: 13
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nGet the bitwise structure of the value.\n"
  example: []
  syntax:
    content: >-
      public static (byte nExpBits, byte nFracBits, ushort expOffset) GetStructure<T>(this T x)

          where T : IFloatingPoint<T>
    parameters:
    - id: x
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.ValueTuple{System.Byte,System.Byte,System.UInt16}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetStructure(Of T As IFloatingPoint(Of T))(x As T) As(nExpBits As Byte, nFracBits As Byte, expOffset As UShort)(Of Byte , Byte, UShort)
  overload: Galaxon.Core.Numbers.XFloatingPoint.GetStructure*
  nameWithType.vb: XFloatingPoint.GetStructure(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.XFloatingPoint.GetStructure(Of T)(T)
  name.vb: GetStructure(Of T)(T)
- uid: Galaxon.Core.Numbers.XFloatingPoint.Disassemble``1(``0)
  commentId: M:Galaxon.Core.Numbers.XFloatingPoint.Disassemble``1(``0)
  id: Disassemble``1(``0)
  isExtensionMethod: true
  parent: Galaxon.Core.Numbers.XFloatingPoint
  langs:
  - csharp
  - vb
  name: Disassemble<T>(T)
  nameWithType: XFloatingPoint.Disassemble<T>(T)
  fullName: Galaxon.Core.Numbers.XFloatingPoint.Disassemble<T>(T)
  type: Method
  source:
    remote:
      path: Numbers/XFloatingPoint.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Disassemble
    path: ../../../Core/Numbers/XFloatingPoint.cs
    startLine: 29
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nDisassemble the floating point value into its bitwise components.\n"
  example: []
  syntax:
    content: >-
      public static (byte signBit, ushort expBits, ulong fracBits) Disassemble<T>(this T x)

          where T : IFloatingPoint<T>
    parameters:
    - id: x
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.ValueTuple{System.Byte,System.UInt16,System.UInt64}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Disassemble(Of T As IFloatingPoint(Of T))(x As T) As(signBit As Byte, expBits As UShort, fracBits As ULong)(Of Byte , UShort, ULong)
  overload: Galaxon.Core.Numbers.XFloatingPoint.Disassemble*
  see:
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Single-precision_floating-point_format
    altText: https://en.wikipedia.org/wiki/Single-precision_floating-point_format
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Double-precision_floating-point_format
    altText: https://en.wikipedia.org/wiki/Double-precision_floating-point_format
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Half-precision_floating-point_format
    altText: https://en.wikipedia.org/wiki/Half-precision_floating-point_format
  nameWithType.vb: XFloatingPoint.Disassemble(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.XFloatingPoint.Disassemble(Of T)(T)
  name.vb: Disassemble(Of T)(T)
references:
- uid: Galaxon.Core.Numbers
  commentId: N:Galaxon.Core.Numbers
  name: Galaxon.Core.Numbers
  nameWithType: Galaxon.Core.Numbers
  fullName: Galaxon.Core.Numbers
- uid: Galaxon.Core.Numbers.XFloatingPoint.GetStructure*
  commentId: Overload:Galaxon.Core.Numbers.XFloatingPoint.GetStructure
  name: GetStructure
  nameWithType: XFloatingPoint.GetStructure
  fullName: Galaxon.Core.Numbers.XFloatingPoint.GetStructure
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.ValueTuple{System.Byte,System.Byte,System.UInt16}
  commentId: '!:System.ValueTuple{System.Byte,System.Byte,System.UInt16}'
  definition: System.ValueTuple`3
  name: (, , )<Byte, Byte, UInt16>
  nameWithType: (, , )<Byte, Byte, UInt16>
  fullName: System.ValueTuple<System.Byte, System.Byte, System.UInt16>
  nameWithType.vb: (, , )(Of Byte, Byte, UInt16)
  fullName.vb: System.ValueTuple(Of System.Byte, System.Byte, System.UInt16)
  name.vb: (, , )(Of Byte, Byte, UInt16)
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.ValueTuple`3
  isExternal: true
  name: (, , )<, , >
  nameWithType: (, , )<, , >
  fullName: System.ValueTuple<, , >
  nameWithType.vb: (, , )(Of , , )
  fullName.vb: System.ValueTuple(Of , , )
  name.vb: (, , )(Of , , )
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Core.Numbers.XFloatingPoint.Disassemble*
  commentId: Overload:Galaxon.Core.Numbers.XFloatingPoint.Disassemble
  name: Disassemble
  nameWithType: XFloatingPoint.Disassemble
  fullName: Galaxon.Core.Numbers.XFloatingPoint.Disassemble
- uid: System.ValueTuple{System.Byte,System.UInt16,System.UInt64}
  commentId: '!:System.ValueTuple{System.Byte,System.UInt16,System.UInt64}'
  definition: System.ValueTuple`3
  name: (, , )<Byte, UInt16, UInt64>
  nameWithType: (, , )<Byte, UInt16, UInt64>
  fullName: System.ValueTuple<System.Byte, System.UInt16, System.UInt64>
  nameWithType.vb: (, , )(Of Byte, UInt16, UInt64)
  fullName.vb: System.ValueTuple(Of System.Byte, System.UInt16, System.UInt64)
  name.vb: (, , )(Of Byte, UInt16, UInt64)
  spec.csharp:
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: (, , )
    nameWithType: (, , )
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
