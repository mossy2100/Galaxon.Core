### YamlMime:ManagedReference
items:
- uid: Galaxon.Core.Numbers.XNumber
  commentId: T:Galaxon.Core.Numbers.XNumber
  id: XNumber
  parent: Galaxon.Core.Numbers
  children:
  - Galaxon.Core.Numbers.XNumber.Div``1(``0,``0)
  - Galaxon.Core.Numbers.XNumber.DivMod``1(``0,``0)
  - Galaxon.Core.Numbers.XNumber.IsComplex(System.Nullable{System.Object})
  - Galaxon.Core.Numbers.XNumber.IsFixedPoint(System.Nullable{System.Object})
  - Galaxon.Core.Numbers.XNumber.IsFloatingPoint(System.Nullable{System.Object})
  - Galaxon.Core.Numbers.XNumber.IsInteger(System.Nullable{System.Object})
  - Galaxon.Core.Numbers.XNumber.IsNonInteger(System.Nullable{System.Object})
  - Galaxon.Core.Numbers.XNumber.IsNumber(System.Nullable{System.Object})
  - Galaxon.Core.Numbers.XNumber.IsReal(System.Nullable{System.Object})
  - Galaxon.Core.Numbers.XNumber.IsSignedInteger(System.Nullable{System.Object})
  - Galaxon.Core.Numbers.XNumber.IsUnsignedInteger(System.Nullable{System.Object})
  - Galaxon.Core.Numbers.XNumber.Mod``1(``0,``0)
  langs:
  - csharp
  - vb
  name: XNumber
  nameWithType: XNumber
  fullName: Galaxon.Core.Numbers.XNumber
  type: Class
  source:
    remote:
      path: Numbers/XNumber.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: XNumber
    path: ../../../Core/Numbers/XNumber.cs
    startLine: 4
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  syntax:
    content: 'public static class XNumber : object'
    content.vb: >-
      Public Module XNumber

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Galaxon.Core.Numbers.XNumber.IsSignedInteger(System.Nullable{System.Object})
  commentId: M:Galaxon.Core.Numbers.XNumber.IsSignedInteger(System.Nullable{System.Object})
  id: IsSignedInteger(System.Nullable{System.Object})
  parent: Galaxon.Core.Numbers.XNumber
  langs:
  - csharp
  - vb
  name: IsSignedInteger(Nullable<Object>)
  nameWithType: XNumber.IsSignedInteger(Nullable<Object>)
  fullName: Galaxon.Core.Numbers.XNumber.IsSignedInteger(System.Nullable<System.Object>)
  type: Method
  source:
    remote:
      path: Numbers/XNumber.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: IsSignedInteger
    path: ../../../Core/Numbers/XNumber.cs
    startLine: 6
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  syntax:
    content: public static bool IsSignedInteger(object? obj)
    parameters:
    - id: obj
      type: System.Nullable{System.Object}
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsSignedInteger(obj As Object?) As Boolean
  overload: Galaxon.Core.Numbers.XNumber.IsSignedInteger*
  nameWithType.vb: XNumber.IsSignedInteger(Nullable(Of Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.XNumber.IsSignedInteger(System.Nullable(Of System.Object))
  name.vb: IsSignedInteger(Nullable(Of Object))
- uid: Galaxon.Core.Numbers.XNumber.IsUnsignedInteger(System.Nullable{System.Object})
  commentId: M:Galaxon.Core.Numbers.XNumber.IsUnsignedInteger(System.Nullable{System.Object})
  id: IsUnsignedInteger(System.Nullable{System.Object})
  parent: Galaxon.Core.Numbers.XNumber
  langs:
  - csharp
  - vb
  name: IsUnsignedInteger(Nullable<Object>)
  nameWithType: XNumber.IsUnsignedInteger(Nullable<Object>)
  fullName: Galaxon.Core.Numbers.XNumber.IsUnsignedInteger(System.Nullable<System.Object>)
  type: Method
  source:
    remote:
      path: Numbers/XNumber.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: IsUnsignedInteger
    path: ../../../Core/Numbers/XNumber.cs
    startLine: 9
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  syntax:
    content: public static bool IsUnsignedInteger(object? obj)
    parameters:
    - id: obj
      type: System.Nullable{System.Object}
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsUnsignedInteger(obj As Object?) As Boolean
  overload: Galaxon.Core.Numbers.XNumber.IsUnsignedInteger*
  nameWithType.vb: XNumber.IsUnsignedInteger(Nullable(Of Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.XNumber.IsUnsignedInteger(System.Nullable(Of System.Object))
  name.vb: IsUnsignedInteger(Nullable(Of Object))
- uid: Galaxon.Core.Numbers.XNumber.IsFloatingPoint(System.Nullable{System.Object})
  commentId: M:Galaxon.Core.Numbers.XNumber.IsFloatingPoint(System.Nullable{System.Object})
  id: IsFloatingPoint(System.Nullable{System.Object})
  parent: Galaxon.Core.Numbers.XNumber
  langs:
  - csharp
  - vb
  name: IsFloatingPoint(Nullable<Object>)
  nameWithType: XNumber.IsFloatingPoint(Nullable<Object>)
  fullName: Galaxon.Core.Numbers.XNumber.IsFloatingPoint(System.Nullable<System.Object>)
  type: Method
  source:
    remote:
      path: Numbers/XNumber.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: IsFloatingPoint
    path: ../../../Core/Numbers/XNumber.cs
    startLine: 12
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  syntax:
    content: public static bool IsFloatingPoint(object? obj)
    parameters:
    - id: obj
      type: System.Nullable{System.Object}
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsFloatingPoint(obj As Object?) As Boolean
  overload: Galaxon.Core.Numbers.XNumber.IsFloatingPoint*
  nameWithType.vb: XNumber.IsFloatingPoint(Nullable(Of Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.XNumber.IsFloatingPoint(System.Nullable(Of System.Object))
  name.vb: IsFloatingPoint(Nullable(Of Object))
- uid: Galaxon.Core.Numbers.XNumber.IsFixedPoint(System.Nullable{System.Object})
  commentId: M:Galaxon.Core.Numbers.XNumber.IsFixedPoint(System.Nullable{System.Object})
  id: IsFixedPoint(System.Nullable{System.Object})
  parent: Galaxon.Core.Numbers.XNumber
  langs:
  - csharp
  - vb
  name: IsFixedPoint(Nullable<Object>)
  nameWithType: XNumber.IsFixedPoint(Nullable<Object>)
  fullName: Galaxon.Core.Numbers.XNumber.IsFixedPoint(System.Nullable<System.Object>)
  type: Method
  source:
    remote:
      path: Numbers/XNumber.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: IsFixedPoint
    path: ../../../Core/Numbers/XNumber.cs
    startLine: 15
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  syntax:
    content: public static bool IsFixedPoint(object? obj)
    parameters:
    - id: obj
      type: System.Nullable{System.Object}
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsFixedPoint(obj As Object?) As Boolean
  overload: Galaxon.Core.Numbers.XNumber.IsFixedPoint*
  nameWithType.vb: XNumber.IsFixedPoint(Nullable(Of Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.XNumber.IsFixedPoint(System.Nullable(Of System.Object))
  name.vb: IsFixedPoint(Nullable(Of Object))
- uid: Galaxon.Core.Numbers.XNumber.IsInteger(System.Nullable{System.Object})
  commentId: M:Galaxon.Core.Numbers.XNumber.IsInteger(System.Nullable{System.Object})
  id: IsInteger(System.Nullable{System.Object})
  parent: Galaxon.Core.Numbers.XNumber
  langs:
  - csharp
  - vb
  name: IsInteger(Nullable<Object>)
  nameWithType: XNumber.IsInteger(Nullable<Object>)
  fullName: Galaxon.Core.Numbers.XNumber.IsInteger(System.Nullable<System.Object>)
  type: Method
  source:
    remote:
      path: Numbers/XNumber.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: IsInteger
    path: ../../../Core/Numbers/XNumber.cs
    startLine: 18
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  syntax:
    content: public static bool IsInteger(object? obj)
    parameters:
    - id: obj
      type: System.Nullable{System.Object}
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsInteger(obj As Object?) As Boolean
  overload: Galaxon.Core.Numbers.XNumber.IsInteger*
  nameWithType.vb: XNumber.IsInteger(Nullable(Of Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.XNumber.IsInteger(System.Nullable(Of System.Object))
  name.vb: IsInteger(Nullable(Of Object))
- uid: Galaxon.Core.Numbers.XNumber.IsNonInteger(System.Nullable{System.Object})
  commentId: M:Galaxon.Core.Numbers.XNumber.IsNonInteger(System.Nullable{System.Object})
  id: IsNonInteger(System.Nullable{System.Object})
  parent: Galaxon.Core.Numbers.XNumber
  langs:
  - csharp
  - vb
  name: IsNonInteger(Nullable<Object>)
  nameWithType: XNumber.IsNonInteger(Nullable<Object>)
  fullName: Galaxon.Core.Numbers.XNumber.IsNonInteger(System.Nullable<System.Object>)
  type: Method
  source:
    remote:
      path: Numbers/XNumber.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: IsNonInteger
    path: ../../../Core/Numbers/XNumber.cs
    startLine: 21
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  syntax:
    content: public static bool IsNonInteger(object? obj)
    parameters:
    - id: obj
      type: System.Nullable{System.Object}
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsNonInteger(obj As Object?) As Boolean
  overload: Galaxon.Core.Numbers.XNumber.IsNonInteger*
  nameWithType.vb: XNumber.IsNonInteger(Nullable(Of Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.XNumber.IsNonInteger(System.Nullable(Of System.Object))
  name.vb: IsNonInteger(Nullable(Of Object))
- uid: Galaxon.Core.Numbers.XNumber.IsReal(System.Nullable{System.Object})
  commentId: M:Galaxon.Core.Numbers.XNumber.IsReal(System.Nullable{System.Object})
  id: IsReal(System.Nullable{System.Object})
  parent: Galaxon.Core.Numbers.XNumber
  langs:
  - csharp
  - vb
  name: IsReal(Nullable<Object>)
  nameWithType: XNumber.IsReal(Nullable<Object>)
  fullName: Galaxon.Core.Numbers.XNumber.IsReal(System.Nullable<System.Object>)
  type: Method
  source:
    remote:
      path: Numbers/XNumber.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: IsReal
    path: ../../../Core/Numbers/XNumber.cs
    startLine: 24
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  syntax:
    content: public static bool IsReal(object? obj)
    parameters:
    - id: obj
      type: System.Nullable{System.Object}
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsReal(obj As Object?) As Boolean
  overload: Galaxon.Core.Numbers.XNumber.IsReal*
  nameWithType.vb: XNumber.IsReal(Nullable(Of Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.XNumber.IsReal(System.Nullable(Of System.Object))
  name.vb: IsReal(Nullable(Of Object))
- uid: Galaxon.Core.Numbers.XNumber.IsComplex(System.Nullable{System.Object})
  commentId: M:Galaxon.Core.Numbers.XNumber.IsComplex(System.Nullable{System.Object})
  id: IsComplex(System.Nullable{System.Object})
  parent: Galaxon.Core.Numbers.XNumber
  langs:
  - csharp
  - vb
  name: IsComplex(Nullable<Object>)
  nameWithType: XNumber.IsComplex(Nullable<Object>)
  fullName: Galaxon.Core.Numbers.XNumber.IsComplex(System.Nullable<System.Object>)
  type: Method
  source:
    remote:
      path: Numbers/XNumber.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: IsComplex
    path: ../../../Core/Numbers/XNumber.cs
    startLine: 27
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  syntax:
    content: public static bool IsComplex(object? obj)
    parameters:
    - id: obj
      type: System.Nullable{System.Object}
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsComplex(obj As Object?) As Boolean
  overload: Galaxon.Core.Numbers.XNumber.IsComplex*
  nameWithType.vb: XNumber.IsComplex(Nullable(Of Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.XNumber.IsComplex(System.Nullable(Of System.Object))
  name.vb: IsComplex(Nullable(Of Object))
- uid: Galaxon.Core.Numbers.XNumber.IsNumber(System.Nullable{System.Object})
  commentId: M:Galaxon.Core.Numbers.XNumber.IsNumber(System.Nullable{System.Object})
  id: IsNumber(System.Nullable{System.Object})
  parent: Galaxon.Core.Numbers.XNumber
  langs:
  - csharp
  - vb
  name: IsNumber(Nullable<Object>)
  nameWithType: XNumber.IsNumber(Nullable<Object>)
  fullName: Galaxon.Core.Numbers.XNumber.IsNumber(System.Nullable<System.Object>)
  type: Method
  source:
    remote:
      path: Numbers/XNumber.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: IsNumber
    path: ../../../Core/Numbers/XNumber.cs
    startLine: 30
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  syntax:
    content: public static bool IsNumber(object? obj)
    parameters:
    - id: obj
      type: System.Nullable{System.Object}
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsNumber(obj As Object?) As Boolean
  overload: Galaxon.Core.Numbers.XNumber.IsNumber*
  nameWithType.vb: XNumber.IsNumber(Nullable(Of Object))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.XNumber.IsNumber(System.Nullable(Of System.Object))
  name.vb: IsNumber(Nullable(Of Object))
- uid: Galaxon.Core.Numbers.XNumber.DivMod``1(``0,``0)
  commentId: M:Galaxon.Core.Numbers.XNumber.DivMod``1(``0,``0)
  id: DivMod``1(``0,``0)
  parent: Galaxon.Core.Numbers.XNumber
  langs:
  - csharp
  - vb
  name: DivMod<T>(T, T)
  nameWithType: XNumber.DivMod<T>(T, T)
  fullName: Galaxon.Core.Numbers.XNumber.DivMod<T>(T, T)
  type: Method
  source:
    remote:
      path: Numbers/XNumber.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: DivMod
    path: ../../../Core/Numbers/XNumber.cs
    startLine: 48
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nInteger division and modulo operation using floored division.\nThe modulus will always have the same sign as the divisor.\n\nUnlike the truncated division and modulo provided by C#&apos;s operators, floored division\nproduces a regular cycling pattern through both negative and positive values of the divisor.\n\nIt permits things like:\nbool isOdd = Mod(num, 2) == 1;\n\nTrying to do this using the % operator will fail for negative divisors, however. e.g.\nbool isOdd = num % 2 == 1;\nIn this case, if num is negative 0, num % 2 == -1\n"
  example: []
  syntax:
    content: >-
      public static (T div, T mod) DivMod<T>(T a, T b)

          where T : INumberBase<T>, IModulusOperators<T, T, T>, IComparisonOperators<T, T, bool>
    parameters:
    - id: a
      type: '{T}'
    - id: b
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.ValueTuple{{T},{T}}
    content.vb: Public Shared Function DivMod(Of T As {INumberBase(Of T), IModulusOperators(Of T, T, T), IComparisonOperators(Of T, T, Boolean)})(a As T, b As T) As(div As T, mod As T)(Of T , T)
  overload: Galaxon.Core.Numbers.XNumber.DivMod*
  see:
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Modulo_operation
    altText: https://en.wikipedia.org/wiki/Modulo_operation
  nameWithType.vb: XNumber.DivMod(Of T)(T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.XNumber.DivMod(Of T)(T, T)
  name.vb: DivMod(Of T)(T, T)
- uid: Galaxon.Core.Numbers.XNumber.Div``1(``0,``0)
  commentId: M:Galaxon.Core.Numbers.XNumber.Div``1(``0,``0)
  id: Div``1(``0,``0)
  parent: Galaxon.Core.Numbers.XNumber
  langs:
  - csharp
  - vb
  name: Div<T>(T, T)
  nameWithType: XNumber.Div<T>(T, T)
  fullName: Galaxon.Core.Numbers.XNumber.Div<T>(T, T)
  type: Method
  source:
    remote:
      path: Numbers/XNumber.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Div
    path: ../../../Core/Numbers/XNumber.cs
    startLine: 65
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nCorrected integer division operation.\n"
  example: []
  syntax:
    content: >-
      public static T Div<T>(T a, T b)

          where T : INumberBase<T>, IModulusOperators<T, T, T>, IComparisonOperators<T, T, bool>
    parameters:
    - id: a
      type: '{T}'
    - id: b
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function Div(Of T As {INumberBase(Of T), IModulusOperators(Of T, T, T), IComparisonOperators(Of T, T, Boolean)})(a As T, b As T) As T
  overload: Galaxon.Core.Numbers.XNumber.Div*
  see:
  - linkId: Galaxon.Core.Numbers.XNumber.DivMod``1(``0,``0)
    commentId: M:Galaxon.Core.Numbers.XNumber.DivMod``1(``0,``0)
  nameWithType.vb: XNumber.Div(Of T)(T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.XNumber.Div(Of T)(T, T)
  name.vb: Div(Of T)(T, T)
- uid: Galaxon.Core.Numbers.XNumber.Mod``1(``0,``0)
  commentId: M:Galaxon.Core.Numbers.XNumber.Mod``1(``0,``0)
  id: Mod``1(``0,``0)
  parent: Galaxon.Core.Numbers.XNumber
  langs:
  - csharp
  - vb
  name: Mod<T>(T, T)
  nameWithType: XNumber.Mod<T>(T, T)
  fullName: Galaxon.Core.Numbers.XNumber.Mod<T>(T, T)
  type: Method
  source:
    remote:
      path: Numbers/XNumber.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: Mod
    path: ../../../Core/Numbers/XNumber.cs
    startLine: 76
  assemblies:
  - Galaxon.Core.Numbers
  namespace: Galaxon.Core.Numbers
  summary: "\nCorrected modulo operation.\n"
  example: []
  syntax:
    content: >-
      public static T Mod<T>(T a, T b)

          where T : INumberBase<T>, IModulusOperators<T, T, T>, IComparisonOperators<T, T, bool>
    parameters:
    - id: a
      type: '{T}'
    - id: b
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function Mod(Of T As {INumberBase(Of T), IModulusOperators(Of T, T, T), IComparisonOperators(Of T, T, Boolean)})(a As T, b As T) As T
  overload: Galaxon.Core.Numbers.XNumber.Mod*
  see:
  - linkId: Galaxon.Core.Numbers.XNumber.DivMod``1(``0,``0)
    commentId: M:Galaxon.Core.Numbers.XNumber.DivMod``1(``0,``0)
  nameWithType.vb: XNumber.Mod(Of T)(T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Numbers.XNumber.Mod(Of T)(T, T)
  name.vb: Mod(Of T)(T, T)
references:
- uid: Galaxon.Core.Numbers
  commentId: N:Galaxon.Core.Numbers
  name: Galaxon.Core.Numbers
  nameWithType: Galaxon.Core.Numbers
  fullName: Galaxon.Core.Numbers
- uid: Galaxon.Core.Numbers.XNumber.IsSignedInteger*
  commentId: Overload:Galaxon.Core.Numbers.XNumber.IsSignedInteger
  name: IsSignedInteger
  nameWithType: XNumber.IsSignedInteger
  fullName: Galaxon.Core.Numbers.XNumber.IsSignedInteger
- uid: System.Nullable{System.Object}
  commentId: '!:System.Nullable{System.Object}'
  definition: System.Nullable`1
  name: Nullable<Object>
  nameWithType: Nullable<Object>
  fullName: System.Nullable<System.Object>
  nameWithType.vb: Nullable(Of Object)
  fullName.vb: System.Nullable(Of System.Object)
  name.vb: Nullable(Of Object)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Core.Numbers.XNumber.IsUnsignedInteger*
  commentId: Overload:Galaxon.Core.Numbers.XNumber.IsUnsignedInteger
  name: IsUnsignedInteger
  nameWithType: XNumber.IsUnsignedInteger
  fullName: Galaxon.Core.Numbers.XNumber.IsUnsignedInteger
- uid: Galaxon.Core.Numbers.XNumber.IsFloatingPoint*
  commentId: Overload:Galaxon.Core.Numbers.XNumber.IsFloatingPoint
  name: IsFloatingPoint
  nameWithType: XNumber.IsFloatingPoint
  fullName: Galaxon.Core.Numbers.XNumber.IsFloatingPoint
- uid: Galaxon.Core.Numbers.XNumber.IsFixedPoint*
  commentId: Overload:Galaxon.Core.Numbers.XNumber.IsFixedPoint
  name: IsFixedPoint
  nameWithType: XNumber.IsFixedPoint
  fullName: Galaxon.Core.Numbers.XNumber.IsFixedPoint
- uid: Galaxon.Core.Numbers.XNumber.IsInteger*
  commentId: Overload:Galaxon.Core.Numbers.XNumber.IsInteger
  name: IsInteger
  nameWithType: XNumber.IsInteger
  fullName: Galaxon.Core.Numbers.XNumber.IsInteger
- uid: Galaxon.Core.Numbers.XNumber.IsNonInteger*
  commentId: Overload:Galaxon.Core.Numbers.XNumber.IsNonInteger
  name: IsNonInteger
  nameWithType: XNumber.IsNonInteger
  fullName: Galaxon.Core.Numbers.XNumber.IsNonInteger
- uid: Galaxon.Core.Numbers.XNumber.IsReal*
  commentId: Overload:Galaxon.Core.Numbers.XNumber.IsReal
  name: IsReal
  nameWithType: XNumber.IsReal
  fullName: Galaxon.Core.Numbers.XNumber.IsReal
- uid: Galaxon.Core.Numbers.XNumber.IsComplex*
  commentId: Overload:Galaxon.Core.Numbers.XNumber.IsComplex
  name: IsComplex
  nameWithType: XNumber.IsComplex
  fullName: Galaxon.Core.Numbers.XNumber.IsComplex
- uid: Galaxon.Core.Numbers.XNumber.IsNumber*
  commentId: Overload:Galaxon.Core.Numbers.XNumber.IsNumber
  name: IsNumber
  nameWithType: XNumber.IsNumber
  fullName: Galaxon.Core.Numbers.XNumber.IsNumber
- uid: Galaxon.Core.Numbers.XNumber.DivMod*
  commentId: Overload:Galaxon.Core.Numbers.XNumber.DivMod
  name: DivMod
  nameWithType: XNumber.DivMod
  fullName: Galaxon.Core.Numbers.XNumber.DivMod
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.ValueTuple{{T},{T}}
  commentId: '!:System.ValueTuple{``0,``0}'
  definition: System.ValueTuple`2
  name: (, )<T, T>
  nameWithType: (, )<T, T>
  fullName: System.ValueTuple<T, T>
  nameWithType.vb: (, )(Of T, T)
  fullName.vb: System.ValueTuple(Of T, T)
  name.vb: (, )(Of T, T)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (, )
    nameWithType: (, )
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (, )
    nameWithType: (, )
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.ValueTuple`2
  commentId: '!:System.ValueTuple`2'
  isExternal: true
  name: (, )<, >
  nameWithType: (, )<, >
  fullName: System.ValueTuple<, >
  nameWithType.vb: (, )(Of , )
  fullName.vb: System.ValueTuple(Of , )
  name.vb: (, )(Of , )
  spec.csharp:
  - uid: System.ValueTuple`2
    name: (, )
    nameWithType: (, )
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: (, )
    nameWithType: (, )
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Core.Numbers.XNumber.DivMod``1(``0,``0)
  commentId: M:Galaxon.Core.Numbers.XNumber.DivMod``1(``0,``0)
  isExternal: true
- uid: Galaxon.Core.Numbers.XNumber.Div*
  commentId: Overload:Galaxon.Core.Numbers.XNumber.Div
  name: Div
  nameWithType: XNumber.Div
  fullName: Galaxon.Core.Numbers.XNumber.Div
- uid: Galaxon.Core.Numbers.XNumber.Mod*
  commentId: Overload:Galaxon.Core.Numbers.XNumber.Mod
  name: Mod
  nameWithType: XNumber.Mod
  fullName: Galaxon.Core.Numbers.XNumber.Mod
