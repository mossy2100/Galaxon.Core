### YamlMime:ManagedReference
items:
- uid: Galaxon.Core.Strings.SuperAndSubscript
  commentId: T:Galaxon.Core.Strings.SuperAndSubscript
  id: SuperAndSubscript
  parent: Galaxon.Core.Strings
  children:
  - Galaxon.Core.Strings.SuperAndSubscript.SubscriptChars
  - Galaxon.Core.Strings.SuperAndSubscript.SuperscriptChars
  - Galaxon.Core.Strings.SuperAndSubscript.ToSubscript(System.String,Galaxon.Core.Strings.InvalidCharAction)
  - Galaxon.Core.Strings.SuperAndSubscript.ToSubscript``1(``0,Galaxon.Core.Strings.InvalidCharAction)
  - Galaxon.Core.Strings.SuperAndSubscript.ToSuperscript(System.String,Galaxon.Core.Strings.InvalidCharAction)
  - Galaxon.Core.Strings.SuperAndSubscript.ToSuperscript``1(``0,Galaxon.Core.Strings.InvalidCharAction)
  langs:
  - csharp
  - vb
  name: SuperAndSubscript
  nameWithType: SuperAndSubscript
  fullName: Galaxon.Core.Strings.SuperAndSubscript
  type: Class
  source:
    remote:
      path: Strings/SuperAndSubscript.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: SuperAndSubscript
    path: ../../../Core/Strings/SuperAndSubscript.cs
    startLine: 10
  assemblies:
  - Galaxon.Core.Strings
  namespace: Galaxon.Core.Strings
  summary: "\nEnables formatting of a number or numeric string in superscript or subscript form.\n"
  example: []
  syntax:
    content: 'public static class SuperAndSubscript : object'
    content.vb: >-
      Public Module SuperAndSubscript

          Inherits Object
  see:
  - linkType: HRef
    linkId: https://en.wikipedia.org/wiki/Unicode_subscripts_and_superscripts
    altText: https://en.wikipedia.org/wiki/Unicode_subscripts_and_superscripts
  - linkType: HRef
    linkId: https://rupertshepherd.info/resource_pages/superscript-letters-in-unicode
    altText: https://rupertshepherd.info/resource_pages/superscript-letters-in-unicode
  - linkType: HRef
    linkId: https://unicode-table.com/en/
    altText: https://unicode-table.com/en/
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Galaxon.Core.Strings.SuperAndSubscript.SuperscriptChars
  commentId: F:Galaxon.Core.Strings.SuperAndSubscript.SuperscriptChars
  id: SuperscriptChars
  parent: Galaxon.Core.Strings.SuperAndSubscript
  langs:
  - csharp
  - vb
  name: SuperscriptChars
  nameWithType: SuperAndSubscript.SuperscriptChars
  fullName: Galaxon.Core.Strings.SuperAndSubscript.SuperscriptChars
  type: Field
  source:
    remote:
      path: Strings/SuperAndSubscript.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: SuperscriptChars
    path: ../../../Core/Strings/SuperAndSubscript.cs
    startLine: 17
  assemblies:
  - Galaxon.Core.Strings
  namespace: Galaxon.Core.Strings
  summary: "\nSuperscript versions of characters.\nThe intention here is to support most characters likely to appear in a superscript.\nThe most important ones are digits and the hyphen.\n"
  example: []
  syntax:
    content: public static readonly Dictionary<char, char> SuperscriptChars
    return:
      type: Dictionary{System.Char,System.Char}
    content.vb: Public Shared ReadOnly SuperscriptChars As Dictionary(Of Char, Char)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Galaxon.Core.Strings.SuperAndSubscript.SubscriptChars
  commentId: F:Galaxon.Core.Strings.SuperAndSubscript.SubscriptChars
  id: SubscriptChars
  parent: Galaxon.Core.Strings.SuperAndSubscript
  langs:
  - csharp
  - vb
  name: SubscriptChars
  nameWithType: SuperAndSubscript.SubscriptChars
  fullName: Galaxon.Core.Strings.SuperAndSubscript.SubscriptChars
  type: Field
  source:
    remote:
      path: Strings/SuperAndSubscript.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: SubscriptChars
    path: ../../../Core/Strings/SuperAndSubscript.cs
    startLine: 40
  assemblies:
  - Galaxon.Core.Strings
  namespace: Galaxon.Core.Strings
  summary: "\nSubscript versions of characters.\n"
  example: []
  syntax:
    content: public static readonly Dictionary<char, char> SubscriptChars
    return:
      type: Dictionary{System.Char,System.Char}
    content.vb: Public Shared ReadOnly SubscriptChars As Dictionary(Of Char, Char)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Galaxon.Core.Strings.SuperAndSubscript.ToSuperscript(System.String,Galaxon.Core.Strings.InvalidCharAction)
  commentId: M:Galaxon.Core.Strings.SuperAndSubscript.ToSuperscript(System.String,Galaxon.Core.Strings.InvalidCharAction)
  id: ToSuperscript(System.String,Galaxon.Core.Strings.InvalidCharAction)
  isExtensionMethod: true
  parent: Galaxon.Core.Strings.SuperAndSubscript
  langs:
  - csharp
  - vb
  name: ToSuperscript(String, InvalidCharAction)
  nameWithType: SuperAndSubscript.ToSuperscript(String, InvalidCharAction)
  fullName: Galaxon.Core.Strings.SuperAndSubscript.ToSuperscript(System.String, Galaxon.Core.Strings.InvalidCharAction)
  type: Method
  source:
    remote:
      path: Strings/SuperAndSubscript.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: ToSuperscript
    path: ../../../Core/Strings/SuperAndSubscript.cs
    startLine: 55
  assemblies:
  - Galaxon.Core.Strings
  namespace: Galaxon.Core.Strings
  syntax:
    content: public static string ToSuperscript(this string str, InvalidCharAction action = InvalidCharAction.Skip)
    parameters:
    - id: str
      type: System.String
    - id: action
      type: Galaxon.Core.Strings.InvalidCharAction
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToSuperscript(str As String, action As InvalidCharAction = InvalidCharAction.Skip) As String
  overload: Galaxon.Core.Strings.SuperAndSubscript.ToSuperscript*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Strings.SuperAndSubscript.ToSubscript(System.String,Galaxon.Core.Strings.InvalidCharAction)
  commentId: M:Galaxon.Core.Strings.SuperAndSubscript.ToSubscript(System.String,Galaxon.Core.Strings.InvalidCharAction)
  id: ToSubscript(System.String,Galaxon.Core.Strings.InvalidCharAction)
  isExtensionMethod: true
  parent: Galaxon.Core.Strings.SuperAndSubscript
  langs:
  - csharp
  - vb
  name: ToSubscript(String, InvalidCharAction)
  nameWithType: SuperAndSubscript.ToSubscript(String, InvalidCharAction)
  fullName: Galaxon.Core.Strings.SuperAndSubscript.ToSubscript(System.String, Galaxon.Core.Strings.InvalidCharAction)
  type: Method
  source:
    remote:
      path: Strings/SuperAndSubscript.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: ToSubscript
    path: ../../../Core/Strings/SuperAndSubscript.cs
    startLine: 59
  assemblies:
  - Galaxon.Core.Strings
  namespace: Galaxon.Core.Strings
  syntax:
    content: public static string ToSubscript(this string str, InvalidCharAction action = InvalidCharAction.Skip)
    parameters:
    - id: str
      type: System.String
    - id: action
      type: Galaxon.Core.Strings.InvalidCharAction
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToSubscript(str As String, action As InvalidCharAction = InvalidCharAction.Skip) As String
  overload: Galaxon.Core.Strings.SuperAndSubscript.ToSubscript*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Galaxon.Core.Strings.SuperAndSubscript.ToSuperscript``1(``0,Galaxon.Core.Strings.InvalidCharAction)
  commentId: M:Galaxon.Core.Strings.SuperAndSubscript.ToSuperscript``1(``0,Galaxon.Core.Strings.InvalidCharAction)
  id: ToSuperscript``1(``0,Galaxon.Core.Strings.InvalidCharAction)
  isExtensionMethod: true
  parent: Galaxon.Core.Strings.SuperAndSubscript
  langs:
  - csharp
  - vb
  name: ToSuperscript<T>(T, InvalidCharAction)
  nameWithType: SuperAndSubscript.ToSuperscript<T>(T, InvalidCharAction)
  fullName: Galaxon.Core.Strings.SuperAndSubscript.ToSuperscript<T>(T, Galaxon.Core.Strings.InvalidCharAction)
  type: Method
  source:
    remote:
      path: Strings/SuperAndSubscript.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: ToSuperscript
    path: ../../../Core/Strings/SuperAndSubscript.cs
    startLine: 63
  assemblies:
  - Galaxon.Core.Strings
  namespace: Galaxon.Core.Strings
  syntax:
    content: >-
      public static string? ToSuperscript<T>(this T n, InvalidCharAction action = InvalidCharAction.Skip)

          where T : INumberBase<T>
    parameters:
    - id: n
      type: '{T}'
    - id: action
      type: Galaxon.Core.Strings.InvalidCharAction
    typeParameters:
    - id: T
    return:
      type: System.Nullable{System.String}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToSuperscript(Of T As INumberBase(Of T))(n As T, action As InvalidCharAction = InvalidCharAction.Skip) As String?
  overload: Galaxon.Core.Strings.SuperAndSubscript.ToSuperscript*
  nameWithType.vb: SuperAndSubscript.ToSuperscript(Of T)(T, InvalidCharAction)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Strings.SuperAndSubscript.ToSuperscript(Of T)(T, Galaxon.Core.Strings.InvalidCharAction)
  name.vb: ToSuperscript(Of T)(T, InvalidCharAction)
- uid: Galaxon.Core.Strings.SuperAndSubscript.ToSubscript``1(``0,Galaxon.Core.Strings.InvalidCharAction)
  commentId: M:Galaxon.Core.Strings.SuperAndSubscript.ToSubscript``1(``0,Galaxon.Core.Strings.InvalidCharAction)
  id: ToSubscript``1(``0,Galaxon.Core.Strings.InvalidCharAction)
  isExtensionMethod: true
  parent: Galaxon.Core.Strings.SuperAndSubscript
  langs:
  - csharp
  - vb
  name: ToSubscript<T>(T, InvalidCharAction)
  nameWithType: SuperAndSubscript.ToSubscript<T>(T, InvalidCharAction)
  fullName: Galaxon.Core.Strings.SuperAndSubscript.ToSubscript<T>(T, Galaxon.Core.Strings.InvalidCharAction)
  type: Method
  source:
    remote:
      path: Strings/SuperAndSubscript.cs
      branch: main
      repo: git@github.com:mossy2100/Core.git
    id: ToSubscript
    path: ../../../Core/Strings/SuperAndSubscript.cs
    startLine: 67
  assemblies:
  - Galaxon.Core.Strings
  namespace: Galaxon.Core.Strings
  syntax:
    content: >-
      public static string? ToSubscript<T>(this T n, InvalidCharAction action = InvalidCharAction.Skip)

          where T : INumberBase<T>
    parameters:
    - id: n
      type: '{T}'
    - id: action
      type: Galaxon.Core.Strings.InvalidCharAction
    typeParameters:
    - id: T
    return:
      type: System.Nullable{System.String}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToSubscript(Of T As INumberBase(Of T))(n As T, action As InvalidCharAction = InvalidCharAction.Skip) As String?
  overload: Galaxon.Core.Strings.SuperAndSubscript.ToSubscript*
  nameWithType.vb: SuperAndSubscript.ToSubscript(Of T)(T, InvalidCharAction)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Galaxon.Core.Strings.SuperAndSubscript.ToSubscript(Of T)(T, Galaxon.Core.Strings.InvalidCharAction)
  name.vb: ToSubscript(Of T)(T, InvalidCharAction)
references:
- uid: Galaxon.Core.Strings
  commentId: N:Galaxon.Core.Strings
  name: Galaxon.Core.Strings
  nameWithType: Galaxon.Core.Strings
  fullName: Galaxon.Core.Strings
- uid: Dictionary{System.Char,System.Char}
  commentId: '!:Dictionary{System.Char,System.Char}'
  definition: Dictionary`2
  name: Dictionary<Char, Char>
  nameWithType: Dictionary<Char, Char>
  fullName: Dictionary<System.Char, System.Char>
  nameWithType.vb: Dictionary(Of Char, Char)
  fullName.vb: Dictionary(Of System.Char, System.Char)
  name.vb: Dictionary(Of Char, Char)
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dictionary`2
  isExternal: true
  name: Dictionary<, >
  nameWithType: Dictionary<, >
  fullName: Dictionary<, >
  nameWithType.vb: Dictionary(Of , )
  fullName.vb: Dictionary(Of , )
  name.vb: Dictionary(Of , )
  spec.csharp:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Galaxon.Core.Strings.SuperAndSubscript.ToSuperscript*
  commentId: Overload:Galaxon.Core.Strings.SuperAndSubscript.ToSuperscript
  name: ToSuperscript
  nameWithType: SuperAndSubscript.ToSuperscript
  fullName: Galaxon.Core.Strings.SuperAndSubscript.ToSuperscript
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Galaxon.Core.Strings.InvalidCharAction
  commentId: T:Galaxon.Core.Strings.InvalidCharAction
  parent: Galaxon.Core.Strings
  name: InvalidCharAction
  nameWithType: InvalidCharAction
  fullName: Galaxon.Core.Strings.InvalidCharAction
- uid: Galaxon.Core.Strings.SuperAndSubscript.ToSubscript*
  commentId: Overload:Galaxon.Core.Strings.SuperAndSubscript.ToSubscript
  name: ToSubscript
  nameWithType: SuperAndSubscript.ToSubscript
  fullName: Galaxon.Core.Strings.SuperAndSubscript.ToSubscript
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Nullable{System.String}
  commentId: '!:System.Nullable{System.String}'
  definition: System.Nullable`1
  name: Nullable<String>
  nameWithType: Nullable<String>
  fullName: System.Nullable<System.String>
  nameWithType.vb: Nullable(Of String)
  fullName.vb: System.Nullable(Of System.String)
  name.vb: Nullable(Of String)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
